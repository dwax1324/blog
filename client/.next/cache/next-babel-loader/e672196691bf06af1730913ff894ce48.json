{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$();\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    query Posts {\\n  posts {\\n    id\\n    title\\n    description\\n    createdAt\\n    updatedAt\\n  }\\n}\\n    \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    query Post($id: Int!) {\\n  post(id: $id) {\\n    id\\n    title\\n    description\\n    createdAt\\n    updatedAt\\n  }\\n}\\n    \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    query Me {\\n  me\\n}\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Logout {\\n  logout\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Login($id: String!, $password: String!) {\\n  login(id: $id, password: $password)\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport var LoginDocument = gql(_templateObject());\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      id: // value for 'id'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  _s();\n\n  return Apollo.useMutation(LoginDocument, baseOptions);\n}\n\n_s(useLoginMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LogoutDocument = gql(_templateObject2());\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  _s2();\n\n  return Apollo.useMutation(LogoutDocument, baseOptions);\n}\n\n_s2(useLogoutMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var MeDocument = gql(_templateObject3());\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  _s3();\n\n  return Apollo.useQuery(MeDocument, baseOptions);\n}\n\n_s3(useMeQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMeLazyQuery(baseOptions) {\n  _s4();\n\n  return Apollo.useLazyQuery(MeDocument, baseOptions);\n}\n\n_s4(useMeLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var PostDocument = gql(_templateObject4());\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function usePostQuery(baseOptions) {\n  _s5();\n\n  return Apollo.useQuery(PostDocument, baseOptions);\n}\n\n_s5(usePostQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function usePostLazyQuery(baseOptions) {\n  _s6();\n\n  return Apollo.useLazyQuery(PostDocument, baseOptions);\n}\n\n_s6(usePostLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var PostsDocument = gql(_templateObject5());\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function usePostsQuery(baseOptions) {\n  _s7();\n\n  return Apollo.useQuery(PostsDocument, baseOptions);\n}\n\n_s7(usePostsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function usePostsLazyQuery(baseOptions) {\n  _s8();\n\n  return Apollo.useLazyQuery(PostsDocument, baseOptions);\n}\n\n_s8(usePostsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"sources":["/home/develop/blog/client/generated/graphql.tsx"],"names":["gql","Apollo","LoginDocument","useLoginMutation","baseOptions","useMutation","LogoutDocument","useLogoutMutation","MeDocument","useMeQuery","useQuery","useMeLazyQuery","useLazyQuery","PostDocument","usePostQuery","usePostLazyQuery","PostsDocument","usePostsQuery","usePostsLazyQuery"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AA0HA,OAAO,IAAMC,aAAa,GAAGF,GAAH,mBAAnB;;AAOP;;;;;;;;;;;;;;;;;;AAkBA,OAAO,SAASG,gBAAT,CAA0BC,WAA1B,EAA2G;AAAA;;AAC1G,SAAOH,MAAM,CAACI,WAAP,CAA0DH,aAA1D,EAAyEE,WAAzE,CAAP;AACD;;GAFSD,gB;UACDF,MAAM,CAACI,W;;;AAKtB,OAAO,IAAMC,cAAc,GAAGN,GAAH,oBAApB;;AAOP;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASO,iBAAT,CAA2BH,WAA3B,EAA8G;AAAA;;AAC7G,SAAOH,MAAM,CAACI,WAAP,CAA4DC,cAA5D,EAA4EF,WAA5E,CAAP;AACD;;IAFSG,iB;UACDN,MAAM,CAACI,W;;;AAKtB,OAAO,IAAMG,UAAU,GAAGR,GAAH,oBAAhB;AAMP;;;;;;;;;;;;;;;;AAeA,OAAO,SAASS,UAAT,CAAoBL,WAApB,EAAsF;AAAA;;AACrF,SAAOH,MAAM,CAACS,QAAP,CAA2CF,UAA3C,EAAuDJ,WAAvD,CAAP;AACD;;IAFSK,U;UACDR,MAAM,CAACS,Q;;;AAEtB,OAAO,SAASC,cAAT,CAAwBP,WAAxB,EAA8F;AAAA;;AAC3F,SAAOH,MAAM,CAACW,YAAP,CAA+CJ,UAA/C,EAA2DJ,WAA3D,CAAP;AACD;;IAFOO,c;UACCV,MAAM,CAACW,Y;;;AAKxB,OAAO,IAAMC,YAAY,GAAGb,GAAH,oBAAlB;AAYP;;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASc,YAAT,CAAsBV,WAAtB,EAA4F;AAAA;;AAC3F,SAAOH,MAAM,CAACS,QAAP,CAA+CG,YAA/C,EAA6DT,WAA7D,CAAP;AACD;;IAFSU,Y;UACDb,MAAM,CAACS,Q;;;AAEtB,OAAO,SAASK,gBAAT,CAA0BX,WAA1B,EAAoG;AAAA;;AACjG,SAAOH,MAAM,CAACW,YAAP,CAAmDC,YAAnD,EAAiET,WAAjE,CAAP;AACD;;IAFOW,gB;UACCd,MAAM,CAACW,Y;;;AAKxB,OAAO,IAAMI,aAAa,GAAGhB,GAAH,oBAAnB;AAYP;;;;;;;;;;;;;;;;AAeA,OAAO,SAASiB,aAAT,CAAuBb,WAAvB,EAA+F;AAAA;;AAC9F,SAAOH,MAAM,CAACS,QAAP,CAAiDM,aAAjD,EAAgEZ,WAAhE,CAAP;AACD;;IAFSa,a;UACDhB,MAAM,CAACS,Q;;;AAEtB,OAAO,SAASQ,iBAAT,CAA2Bd,WAA3B,EAAuG;AAAA;;AACpG,SAAOH,MAAM,CAACW,YAAP,CAAqDI,aAArD,EAAoEZ,WAApE,CAAP;AACD;;IAFOc,iB;UACCjB,MAAM,CAACW,Y","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  hello: Scalars['String'];\n  post?: Maybe<Post>;\n  posts: Array<Post>;\n  me: Scalars['Boolean'];\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['Int'];\n};\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['Float'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createPost: Post;\n  updatePost: Post;\n  deletePost: Scalars['Boolean'];\n  login: Scalars['Boolean'];\n  logout: Scalars['Boolean'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  input: PostInput;\n};\n\n\nexport type MutationUpdatePostArgs = {\n  input: PostInput;\n  id: Scalars['Int'];\n};\n\n\nexport type MutationDeletePostArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  id: Scalars['String'];\n};\n\nexport type PostInput = {\n  title: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type LoginMutationVariables = Exact<{\n  id: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'login'>\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'me'>\n);\n\nexport type PostQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type PostQuery = (\n  { __typename?: 'Query' }\n  & { post?: Maybe<(\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'title' | 'description' | 'createdAt' | 'updatedAt'>\n  )> }\n);\n\nexport type PostsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PostsQuery = (\n  { __typename?: 'Query' }\n  & { posts: Array<(\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'title' | 'description' | 'createdAt' | 'updatedAt'>\n  )> }\n);\n\n\nexport const LoginDocument = gql`\n    mutation Login($id: String!, $password: String!) {\n  login(id: $id, password: $password)\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      id: // value for 'id'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const PostDocument = gql`\n    query Post($id: Int!) {\n  post(id: $id) {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n  }\n}\n    `;\n\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function usePostQuery(baseOptions?: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>) {\n        return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);\n      }\nexport function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {\n          return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);\n        }\nexport type PostQueryHookResult = ReturnType<typeof usePostQuery>;\nexport type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;\nexport type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;\nexport const PostsDocument = gql`\n    query Posts {\n  posts {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n  }\n}\n    `;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions?: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        return Apollo.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n      }\nexport function usePostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = Apollo.QueryResult<PostsQuery, PostsQueryVariables>;"]},"metadata":{},"sourceType":"module"}