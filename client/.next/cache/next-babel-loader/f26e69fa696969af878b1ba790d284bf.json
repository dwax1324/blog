{"ast":null,"code":"import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport const PostDocument = gql`\n    query Post($id: Int!) {\n  post(id: $id) {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n  }\n}\n    `;\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function usePostQuery(baseOptions) {\n  return Apollo.useQuery(PostDocument, baseOptions);\n}\nexport function usePostLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(PostDocument, baseOptions);\n}\nexport const PostsDocument = gql`\n    query Posts {\n  posts {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n  }\n}\n    `;\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function usePostsQuery(baseOptions) {\n  return Apollo.useQuery(PostsDocument, baseOptions);\n}\nexport function usePostsLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(PostsDocument, baseOptions);\n}","map":{"version":3,"sources":["/home/develop/blog/client/generated/graphql.tsx"],"names":["gql","Apollo","PostDocument","usePostQuery","baseOptions","useQuery","usePostLazyQuery","useLazyQuery","PostsDocument","usePostsQuery","usePostsLazyQuery"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AA8FA,OAAO,MAAMC,YAAY,GAAGF,GAAI;;;;;;;;;;KAAzB;AAYP;;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASG,YAAT,CAAsBC,WAAtB,EAA4F;AAC3F,SAAOH,MAAM,CAACI,QAAP,CAA+CH,YAA/C,EAA6DE,WAA7D,CAAP;AACD;AACP,OAAO,SAASE,gBAAT,CAA0BF,WAA1B,EAAoG;AACjG,SAAOH,MAAM,CAACM,YAAP,CAAmDL,YAAnD,EAAiEE,WAAjE,CAAP;AACD;AAIT,OAAO,MAAMI,aAAa,GAAGR,GAAI;;;;;;;;;;KAA1B;AAYP;;;;;;;;;;;;;;;;AAeA,OAAO,SAASS,aAAT,CAAuBL,WAAvB,EAA+F;AAC9F,SAAOH,MAAM,CAACI,QAAP,CAAiDG,aAAjD,EAAgEJ,WAAhE,CAAP;AACD;AACP,OAAO,SAASM,iBAAT,CAA2BN,WAA3B,EAAuG;AACpG,SAAOH,MAAM,CAACM,YAAP,CAAqDC,aAArD,EAAoEJ,WAApE,CAAP;AACD","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  hello: Scalars['String'];\n  post?: Maybe<Post>;\n  posts: Array<Post>;\n  Me: Scalars['Boolean'];\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['Int'];\n};\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['Float'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createPost: Post;\n  updatePost: Post;\n  deletePost: Scalars['Boolean'];\n  Login: Scalars['Boolean'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  input: PostInput;\n};\n\n\nexport type MutationUpdatePostArgs = {\n  input: PostInput;\n  id: Scalars['Int'];\n};\n\n\nexport type MutationDeletePostArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  id: Scalars['String'];\n};\n\nexport type PostInput = {\n  title: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type PostQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type PostQuery = (\n  { __typename?: 'Query' }\n  & { post?: Maybe<(\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'title' | 'description' | 'createdAt' | 'updatedAt'>\n  )> }\n);\n\nexport type PostsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PostsQuery = (\n  { __typename?: 'Query' }\n  & { posts: Array<(\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'title' | 'description' | 'createdAt' | 'updatedAt'>\n  )> }\n);\n\n\nexport const PostDocument = gql`\n    query Post($id: Int!) {\n  post(id: $id) {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n  }\n}\n    `;\n\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function usePostQuery(baseOptions?: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>) {\n        return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);\n      }\nexport function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {\n          return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);\n        }\nexport type PostQueryHookResult = ReturnType<typeof usePostQuery>;\nexport type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;\nexport type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;\nexport const PostsDocument = gql`\n    query Posts {\n  posts {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n  }\n}\n    `;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions?: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        return Apollo.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n      }\nexport function usePostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = Apollo.QueryResult<PostsQuery, PostsQueryVariables>;"]},"metadata":{},"sourceType":"module"}