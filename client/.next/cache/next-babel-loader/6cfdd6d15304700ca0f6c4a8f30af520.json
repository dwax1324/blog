{"ast":null,"code":"var _jsxFileName = \"/home/develop/blog/client/pages/tags.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Link, Text } from \"@chakra-ui/core\";\nimport React from \"react\";\nimport { useTagsQuery } from \"../generated/graphql\";\nimport { withApollo } from \"../utils/withApollo\";\nimport NextLink from \"next/link\";\n\nconst tags = () => {\n  var _data$tags;\n\n  const {\n    data,\n    loading\n  } = useTagsQuery();\n  if (!data && !loading) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 33\n    }\n  }, \"server error\");\n  let tags = data === null || data === void 0 ? void 0 : data.tags;\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    w: \"100vw\",\n    h: \"100vh\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    w: \"400px\",\n    h: \"400px\",\n    border: \"1px solid black\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }, data === null || data === void 0 ? void 0 : (_data$tags = data.tags) === null || _data$tags === void 0 ? void 0 : _data$tags.map(t => __jsx(NextLink, {\n    href: \"/:tagId\",\n    as: `/tag/${[t.id]}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 15\n    }\n  }, __jsx(Link, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 19\n    }\n  }, t.text, \"(\", t.postsLength, \")\"))))))));\n};\n\nexport default withApollo({\n  ssr: true\n})(tags);","map":{"version":3,"sources":["/home/develop/blog/client/pages/tags.tsx"],"names":["Box","Link","Text","React","useTagsQuery","withApollo","NextLink","tags","data","loading","map","t","id","text","postsLength","ssr"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,QAAgC,iBAAhC;AACA,OAAOC,KAAP,MAAiC,OAAjC;AAEA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAIA,MAAMC,IAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBL,YAAY,EAAtC;AACA,MAAI,CAACI,IAAD,IAAS,CAACC,OAAd,EAAuB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AAEvB,MAAIF,IAAI,GAAGC,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAED,IAAjB;AAGA,SACE,4BACE,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,OAAP;AAAe,IAAA,CAAC,EAAC,OAAjB;AAAyB,IAAA,OAAO,EAAC,MAAjC;AAAwC,IAAA,cAAc,EAAC,QAAvD;AAAgE,IAAA,UAAU,EAAC,QAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,OAAP;AAAe,IAAA,CAAC,EAAC,OAAjB;AAAyB,IAAA,MAAM,EAAC,iBAAhC;AAAkD,IAAA,OAAO,EAAC,MAA1D;AAAiE,IAAA,cAAc,EAAC,QAAhF;AAAyF,IAAA,UAAU,EAAC,QAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IADH,aACGA,IADH,qCACGA,IAAI,CAAED,IADT,+CACG,WAAYG,GAAZ,CAAiBC,CAAD,IACf,MAAC,QAAD;AAAU,IAAA,IAAI,EAAC,SAAf;AAAyB,IAAA,EAAE,EAAG,QAAO,CAACA,CAAC,CAACC,EAAH,CAAO,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOD,CAAC,CAACE,IAAT,OAAgBF,CAAC,CAACG,WAAlB,MADF,CADF,CADD,CADH,CADF,CADF,CADF,CADF;AAiBD,CAxBD;;AAyBA,eAAeT,UAAU,CAAC;AAAEU,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA0BR,IAA1B,CAAf","sourcesContent":["import { Box, Link, Text } from \"@chakra-ui/core\"\nimport React, { useEffect } from \"react\"\nimport NavBar from \"../components/NavBar\"\nimport { useTagsQuery } from \"../generated/graphql\"\nimport { withApollo } from \"../utils/withApollo\"\nimport NextLink from \"next/link\"\n\ninterface tagsProps { }\n\nconst tags: React.FC<{}> = () => {\n  const { data, loading } = useTagsQuery()\n  if (!data && !loading) return <div>server error</div>\n\n  let tags = data?.tags\n\n\n  return (\n    <>\n      <Box w=\"100vw\" h=\"100vh\" display=\"flex\" justifyContent=\"center\" alignItems='center'>\n        <Box w=\"400px\" h=\"400px\" border=\"1px solid black\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          <Box>\n            {data?.tags?.map((t) => (\n              <NextLink href=\"/:tagId\" as={`/tag/${[t.id]}`}>\n                <Link>\n                  <Text>{t.text}({t.postsLength})</Text>\n                </Link>\n              </NextLink>\n            ))}\n          </Box>\n        </Box>\n      </Box>\n    </>\n  )\n}\nexport default withApollo({ ssr: true })(tags)\n"]},"metadata":{},"sourceType":"module"}