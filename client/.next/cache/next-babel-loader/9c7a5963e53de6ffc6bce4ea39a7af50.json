{"ast":null,"code":"import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport const RegularDetailsFragmentDoc = gql`\n    fragment RegularDetails on Post {\n  id\n  title\n  description\n  createdAt\n  updatedAt\n  thumbnail\n}\n    `;\nexport const AddTagPostDocument = gql`\n    mutation AddTagPost($postId: Int!, $tagId: Int!) {\n  addTagPost(postId: $postId, tagId: $tagId)\n}\n    `;\n\n/**\n * __useAddTagPostMutation__\n *\n * To run a mutation, you first call `useAddTagPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTagPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTagPostMutation, { data, loading, error }] = useAddTagPostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *      tagId: // value for 'tagId'\n *   },\n * });\n */\nexport function useAddTagPostMutation(baseOptions) {\n  return Apollo.useMutation(AddTagPostDocument, baseOptions);\n}\nexport const CreatePostDocument = gql`\n    mutation CreatePost($input: postInput!) {\n  createPost(input: $input) {\n    ...RegularDetails\n  }\n}\n    ${RegularDetailsFragmentDoc}`;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions) {\n  return Apollo.useMutation(CreatePostDocument, baseOptions);\n}\nexport const CreateTagDocument = gql`\n    mutation CreateTag($text: String!) {\n  createTag(text: $text) {\n    id\n    text\n    posts {\n      id\n      title\n      description\n      updatedAt\n      createdAt\n    }\n  }\n}\n    `;\n\n/**\n * __useCreateTagMutation__\n *\n * To run a mutation, you first call `useCreateTagMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTagMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTagMutation, { data, loading, error }] = useCreateTagMutation({\n *   variables: {\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useCreateTagMutation(baseOptions) {\n  return Apollo.useMutation(CreateTagDocument, baseOptions);\n}\nexport const DeletePostDocument = gql`\n    mutation DeletePost($postId: Int!) {\n  deletePost(postId: $postId)\n}\n    `;\n\n/**\n * __useDeletePostMutation__\n *\n * To run a mutation, you first call `useDeletePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePostMutation, { data, loading, error }] = useDeletePostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *   },\n * });\n */\nexport function useDeletePostMutation(baseOptions) {\n  return Apollo.useMutation(DeletePostDocument, baseOptions);\n}\nexport const DeleteTagDocument = gql`\n    mutation DeleteTag($tagId: Int!) {\n  deleteTag(tagId: $tagId)\n}\n    `;\n\n/**\n * __useDeleteTagMutation__\n *\n * To run a mutation, you first call `useDeleteTagMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTagMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTagMutation, { data, loading, error }] = useDeleteTagMutation({\n *   variables: {\n *      tagId: // value for 'tagId'\n *   },\n * });\n */\nexport function useDeleteTagMutation(baseOptions) {\n  return Apollo.useMutation(DeleteTagDocument, baseOptions);\n}\nexport const DeleteTagPostDocument = gql`\n    mutation DeleteTagPost($postId: Int!, $tagId: Int!) {\n  deleteTagPost(postId: $postId, tagId: $tagId)\n}\n    `;\n\n/**\n * __useDeleteTagPostMutation__\n *\n * To run a mutation, you first call `useDeleteTagPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTagPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTagPostMutation, { data, loading, error }] = useDeleteTagPostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *      tagId: // value for 'tagId'\n *   },\n * });\n */\nexport function useDeleteTagPostMutation(baseOptions) {\n  return Apollo.useMutation(DeleteTagPostDocument, baseOptions);\n}\nexport const LoginDocument = gql`\n    mutation Login($id: String!, $password: String!) {\n  login(id: $id, password: $password)\n}\n    `;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      id: // value for 'id'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  return Apollo.useMutation(LoginDocument, baseOptions);\n}\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  return Apollo.useMutation(LogoutDocument, baseOptions);\n}\nexport const UpdatePostDocument = gql`\n    mutation UpdatePost($id: Int!, $input: postInput!) {\n  updatePost(id: $id, input: $input) {\n    ...RegularDetails\n  }\n}\n    ${RegularDetailsFragmentDoc}`;\n\n/**\n * __useUpdatePostMutation__\n *\n * To run a mutation, you first call `useUpdatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePostMutation, { data, loading, error }] = useUpdatePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdatePostMutation(baseOptions) {\n  return Apollo.useMutation(UpdatePostDocument, baseOptions);\n}\nexport const MeDocument = gql`\n    query Me {\n  me\n}\n    `;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  return Apollo.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(MeDocument, baseOptions);\n}\nexport const PostDocument = gql`\n    query Post($id: Int!) {\n  post(id: $id) {\n    ...RegularDetails\n    tags {\n      id\n      text\n    }\n  }\n}\n    ${RegularDetailsFragmentDoc}`;\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function usePostQuery(baseOptions) {\n  return Apollo.useQuery(PostDocument, baseOptions);\n}\nexport function usePostLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(PostDocument, baseOptions);\n}\nexport const PostsDocument = gql`\n    query Posts {\n  posts {\n    ...RegularDetails\n    tags {\n      id\n      text\n    }\n  }\n}\n    ${RegularDetailsFragmentDoc}`;\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function usePostsQuery(baseOptions) {\n  return Apollo.useQuery(PostsDocument, baseOptions);\n}\nexport function usePostsLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(PostsDocument, baseOptions);\n}\nexport const TagDocument = gql`\n    query Tag($id: Int!) {\n  tag(id: $id) {\n    postsLength\n    id\n    text\n    posts {\n      id\n      title\n      description\n      updatedAt\n      createdAt\n    }\n  }\n}\n    `;\n/**\n * __useTagQuery__\n *\n * To run a query within a React component, call `useTagQuery` and pass it any options that fit your needs.\n * When your component renders, `useTagQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTagQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useTagQuery(baseOptions) {\n  return Apollo.useQuery(TagDocument, baseOptions);\n}\nexport function useTagLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(TagDocument, baseOptions);\n}\nexport const TagsDocument = gql`\n    query Tags {\n  tags {\n    id\n    text\n    postsLength\n    posts {\n      id\n      title\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n    `;\n/**\n * __useTagsQuery__\n *\n * To run a query within a React component, call `useTagsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTagsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useTagsQuery(baseOptions) {\n  return Apollo.useQuery(TagsDocument, baseOptions);\n}\nexport function useTagsLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(TagsDocument, baseOptions);\n}","map":null,"metadata":{},"sourceType":"module"}