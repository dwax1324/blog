{"ast":null,"code":"var _jsxFileName = \"/home/develop/blog/client/pages/newPost.tsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState } from \"react\";\nimport Router from \"next/router\";\nimport { withApollo } from \"../utils/withApollo\";\nimport { Formik, Form } from \"formik\";\nimport { useGetPostFromUrl } from \"../utils/useGetPostFromUrl\";\nimport { Box, Button, Input, Textarea } from \"@chakra-ui/core\";\nimport NavBar from \"../components/NavBar\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { dark } from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\nimport { useUpdatePostMutation } from \"../generated/graphql\";\n\nconst edit = () => {\n  const router = Router;\n  const {\n    data\n  } = useGetPostFromUrl();\n  const {\n    0: title,\n    1: setTitle\n  } = useState(\"\");\n  const {\n    0: description,\n    1: setDescription\n  } = useState(\"\");\n  const {\n    0: mdState,\n    1: setMdState\n  } = useState(1);\n  const [updatePost] = useUpdatePostMutation();\n\n  const handleSubmit = async () => {\n    console.log(\"handlesubmit\");\n    await updatePost({\n      variables: {\n        id: data === null || data === void 0 ? void 0 : data.post.id,\n        input: {\n          title: title,\n          description: description\n        }\n      }\n    });\n    router.back();\n  };\n\n  const handleMd = () => {\n    if (mdState === 1) {\n      md.current.style.display = \"none\";\n      setMdState(0);\n    } else {\n      md.current.style.display = \"inline\";\n      setMdState(1);\n    }\n  };\n\n  const md = useRef(null);\n  return __jsx(React.Fragment, null, __jsx(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    mt: \"10vh\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    w: \"55%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      title: title\n    },\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, __jsx(Input, {\n    textAlign: \"center\",\n    value: title,\n    onChange: e => setTitle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }), __jsx(Textarea, {\n    h: \"100vh\",\n    value: description,\n    onChange: e => setDescription(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }), __jsx(Button, {\n    type: \"submit\",\n    ml: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, \"submit\"))), __jsx(Button, {\n    onClick: handleMd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"\\uD3BC\\uCE58\\uAE30\"), __jsx(Box, {\n    ref: md,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst Component = ({\n  value,\n  language\n}) => {\n  return __jsx(SyntaxHighlighter, {\n    language: language !== null && language !== void 0 ? language : null,\n    style: dark,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, value !== null && value !== void 0 ? value : \"\");\n};\n\nexport default withApollo({\n  ssr: false\n})(edit);","map":{"version":3,"sources":["/home/develop/blog/client/pages/newPost.tsx"],"names":["React","useRef","useState","Router","withApollo","Formik","Form","useGetPostFromUrl","Box","Button","Input","Textarea","NavBar","SyntaxHighlighter","dark","useUpdatePostMutation","edit","router","data","title","setTitle","description","setDescription","mdState","setMdState","updatePost","handleSubmit","console","log","variables","id","post","input","back","handleMd","md","current","style","display","e","target","value","Component","language","ssr"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport Router from \"next/router\";\nimport { withApollo } from \"../utils/withApollo\";\nimport { Formik, Form } from \"formik\";\nimport { useGetPostFromUrl } from \"../utils/useGetPostFromUrl\";\nimport { Box, Button, Input, Textarea } from \"@chakra-ui/core\";\nimport NavBar from \"../components/NavBar\";\nimport ReactMarkdown from \"react-markdown\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { dark } from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\nimport { useUpdatePostMutation } from \"../generated/graphql\";\n\nconst edit: React.FC<{}> = () => {\n  const router = Router;\n  const { data } = useGetPostFromUrl();\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [mdState, setMdState] = useState(1);\n  const [updatePost] = useUpdatePostMutation();\n  const handleSubmit = async () => {\n    console.log(\"handlesubmit\");\n    await updatePost({\n      variables: {\n        id: data?.post.id,\n        input: { title: title, description: description },\n      },\n    });\n    router.back();\n  };\n\n  const handleMd = () => {\n    if (mdState === 1) {\n      md.current.style.display = \"none\";\n      setMdState(0);\n    } else {\n      md.current.style.display = \"inline\";\n      setMdState(1);\n    }\n  };\n  const md = useRef(null);\n\n  return (\n    <>\n      <NavBar />\n      <Box display=\"flex\" justifyContent=\"center\" mt=\"10vh\">\n        <Box w=\"55%\">\n          <Formik\n            initialValues={{\n              title: title,\n            }}\n            onSubmit={handleSubmit}\n          >\n            <Form>\n              <Input\n                textAlign=\"center\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n              />\n              <Textarea\n                h=\"100vh\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              ></Textarea>\n              <Button type=\"submit\" ml=\"auto\">\n                submit\n              </Button>\n            </Form>\n          </Formik>\n          <Button onClick={handleMd}>펼치기</Button>\n          <Box ref={md}>\n            {/* <ReactMarkdown\n                source={description}\n                renderers={{\n                  code: Component,\n                }}\n              ></ReactMarkdown> */}\n          </Box>\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nconst Component = ({ value, language }) => {\n  return (\n    <SyntaxHighlighter language={language ?? null} style={dark}>\n      {value ?? \"\"}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default withApollo({ ssr: false })(edit);\n"]},"metadata":{},"sourceType":"module"}