{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/develop/blog/client/pages/edit/[id].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Router from \"next/router\";\nimport { withApollo } from \"../../utils/withApollo\";\nimport { Formik, Form } from \"formik\";\nimport { useGetPostFromUrl } from \"../../utils/useGetPostFromUrl\";\nimport { Box, Button, Input, Textarea } from \"@chakra-ui/core\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { dark } from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\nimport { useUpdatePostMutation } from \"../../generated/graphql\";\n\nvar edit = function edit() {\n  _s();\n\n  var router = Router;\n\n  var _useGetPostFromUrl = useGetPostFromUrl(),\n      data = _useGetPostFromUrl.data;\n\n  var _useState = useState(\"\"),\n      title = _useState[0],\n      setTitle = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      description = _useState2[0],\n      setDescription = _useState2[1];\n\n  var _useState3 = useState(1),\n      mdState = _useState3[0],\n      setMdState = _useState3[1];\n\n  var _useUpdatePostMutatio = useUpdatePostMutation(),\n      _useUpdatePostMutatio2 = _slicedToArray(_useUpdatePostMutatio, 1),\n      updatePost = _useUpdatePostMutatio2[0];\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"handlesubmit\");\n              _context.next = 3;\n              return updatePost({\n                variables: {\n                  id: parseInt(data === null || data === void 0 ? void 0 : data.post.id),\n                  input: {\n                    title: title,\n                    description: description\n                  }\n                }\n              });\n\n            case 3:\n              router.back();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleMd = function handleMd() {\n    if (mdState === 1) {\n      md.current.style.display = \"none\";\n      setMdState(0);\n    } else {\n      md.current.style.display = \"inline\";\n      setMdState(1);\n    }\n  };\n\n  var md = useRef(null);\n  useEffect(function () {\n    if (data) {\n      setTitle(data.post.title);\n      setDescription(data.post.description);\n    }\n  }, [data]);\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    mt: \"10vh\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, !data ? \"\" : __jsx(Box, {\n    w: \"55%\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      title: title\n    },\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, __jsx(Form, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, __jsx(Input, {\n    textAlign: \"center\",\n    value: title,\n    onChange: function onChange(e) {\n      return setTitle(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }\n  }), __jsx(Textarea, {\n    h: \"100vh\",\n    value: description,\n    onChange: function onChange(e) {\n      return setDescription(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 19\n    }\n  }), __jsx(Button, {\n    type: \"submit\",\n    ml: \"auto\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }\n  }, \"submit\"))), __jsx(Button, {\n    onClick: handleMd,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, \"\\uD3BC\\uCE58\\uAE30\"), __jsx(Box, {\n    ref: md,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }))));\n};\n\n_s(edit, \"Lv35zzfJnYUnn+9PbieUoet903Y=\", false, function () {\n  return [useGetPostFromUrl, useUpdatePostMutation];\n});\n\nvar Component = function Component(_ref2) {\n  var value = _ref2.value,\n      language = _ref2.language;\n  return __jsx(SyntaxHighlighter, {\n    language: language !== null && language !== void 0 ? language : null,\n    style: dark,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, value !== null && value !== void 0 ? value : \"\");\n};\n\n_c = Component;\nexport default withApollo({\n  ssr: false\n})(edit);\n\nvar _c;\n\n$RefreshReg$(_c, \"Component\");","map":{"version":3,"sources":["/home/develop/blog/client/pages/edit/[id].tsx"],"names":["React","useEffect","useRef","useState","Router","withApollo","Formik","Form","useGetPostFromUrl","Box","Button","Input","Textarea","SyntaxHighlighter","dark","useUpdatePostMutation","edit","router","data","title","setTitle","description","setDescription","mdState","setMdState","updatePost","handleSubmit","console","log","variables","id","parseInt","post","input","back","handleMd","md","current","style","display","e","target","value","Component","language","ssr"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\nimport Router from \"next/router\"\nimport { withApollo } from \"../../utils/withApollo\"\nimport { Formik, Form } from \"formik\"\nimport { useGetPostFromUrl } from \"../../utils/useGetPostFromUrl\"\nimport { Box, Button, Input, Textarea } from \"@chakra-ui/core\"\nimport NavBar from \"../../components/NavBar\"\nimport ReactMarkdown from \"react-markdown\"\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { dark } from \"react-syntax-highlighter/dist/cjs/styles/hljs\"\nimport { useUpdatePostMutation } from \"../../generated/graphql\"\n\nconst edit: React.FC<{}> = () => {\n  const router = Router\n  const { data } = useGetPostFromUrl()\n  const [title, setTitle] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n  const [mdState, setMdState] = useState(1)\n  const [updatePost] = useUpdatePostMutation()\n  const handleSubmit = async () => {\n    console.log(\"handlesubmit\")\n    await updatePost({\n      variables: {\n        id: parseInt(data?.post.id),\n        input: { title: title, description: description },\n      },\n    })\n    router.back()\n  }\n\n  const handleMd = () => {\n    if (mdState === 1) {\n      md.current.style.display = \"none\"\n      setMdState(0)\n    } else {\n      md.current.style.display = \"inline\"\n      setMdState(1)\n    }\n  }\n  const md = useRef(null)\n\n  useEffect(() => {\n    if (data) {\n      setTitle(data.post.title)\n      setDescription(data.post.description)\n    }\n  }, [data])\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\" mt=\"10vh\">\n        {!data ? (\n          \"\"\n        ) : (\n            <Box w=\"55%\">\n              <Formik\n                initialValues={{\n                  title: title,\n                }}\n                onSubmit={handleSubmit}\n              >\n                <Form>\n                  <Input\n                    textAlign=\"center\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                  />\n                  <Textarea\n                    h=\"100vh\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                  ></Textarea>\n                  <Button type=\"submit\" ml=\"auto\">\n                    submit\n                </Button>\n                </Form>\n              </Formik>\n              <Button onClick={handleMd}>펼치기</Button>\n              <Box ref={md}>\n                {/* <ReactMarkdown\n                source={description}\n                renderers={{\n                  code: Component,\n                }}\n              ></ReactMarkdown> */}\n              </Box>\n            </Box>\n          )}\n      </Box>\n    </>\n  )\n}\n\nconst Component = ({ value, language }) => {\n  return (\n    <SyntaxHighlighter language={language ?? null} style={dark}>\n      {value ?? \"\"}\n    </SyntaxHighlighter>\n  )\n}\n\nexport default withApollo({ ssr: false })(edit)\n"]},"metadata":{},"sourceType":"module"}