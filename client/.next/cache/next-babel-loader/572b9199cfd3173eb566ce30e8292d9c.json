{"ast":null,"code":"var _jsxFileName = \"/home/develop/blog/client/pages/edit/[id].tsx\";\nvar __jsx = React.createElement;\nimport React, { useRef } from \"react\";\nimport Router from \"next/router\";\nimport { withApollo } from \"../../utils/withApollo\";\nimport { Formik, Form } from \"formik\";\nimport { usePostQuery } from \"../../generated/graphql\";\nimport { useGetPostFromUrl } from \"../../utils/useGetPostFromUrl\";\n\nconst edit = () => {\n  const router = Router;\n  const post = useGetPostFromUrl();\n  const {\n    data,\n    loading\n  } = usePostQuery({\n    variables: {\n      id: post.data.post.id\n    }\n  });\n  const idEl = useRef(null);\n  const passwordEl = useRef(null);\n\n  let handleSubmit = async () => {\n    // e.preventDefault();\n    const id = idEl.current.value;\n    const password = passwordEl.current.value;\n    const data = await login({\n      variables: {\n        id: id,\n        password: password\n      }\n    });\n    if (data.data.login) router.push(\"/\");else alert(\"authentication failed\");\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Formik, {\n    initialValues: {\n      id: {},\n      password: {}\n    },\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    name: \"id\",\n    ref: idEl,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }), __jsx(\"input\", {\n    name: \"password\",\n    ref: passwordEl,\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, \"submit\"))));\n};\n\nexport default withApollo({\n  ssr: false\n})(edit);","map":{"version":3,"sources":["/home/develop/blog/client/pages/edit/[id].tsx"],"names":["React","useRef","Router","withApollo","Formik","Form","usePostQuery","useGetPostFromUrl","edit","router","post","data","loading","variables","id","idEl","passwordEl","handleSubmit","current","value","password","login","push","alert","ssr"],"mappings":";;AAAA,OAAOA,KAAP,IAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,YAAT,QAAoD,yBAApD;AACA,SAASC,iBAAT,QAAkC,+BAAlC;;AACA,MAAMC,IAAkB,GAAG,MAAM;AAC/B,QAAMC,MAAM,GAAGP,MAAf;AACA,QAAMQ,IAAI,GAAGH,iBAAiB,EAA9B;AACA,QAAM;AAAEI,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBN,YAAY,CAAC;AACrCO,IAAAA,SAAS,EAAE;AAAEC,MAAAA,EAAE,EAAEJ,IAAI,CAACC,IAAL,CAAUD,IAAV,CAAeI;AAArB;AAD0B,GAAD,CAAtC;AAGA,QAAMC,IAAI,GAAGd,MAAM,CAAC,IAAD,CAAnB;AACA,QAAMe,UAAU,GAAGf,MAAM,CAAC,IAAD,CAAzB;;AACA,MAAIgB,YAAY,GAAG,YAAY;AAC7B;AACA,UAAMH,EAAE,GAAGC,IAAI,CAACG,OAAL,CAAaC,KAAxB;AACA,UAAMC,QAAQ,GAAGJ,UAAU,CAACE,OAAX,CAAmBC,KAApC;AACA,UAAMR,IAAI,GAAG,MAAMU,KAAK,CAAC;AACvBR,MAAAA,SAAS,EAAE;AAAEC,QAAAA,EAAE,EAAEA,EAAN;AAAUM,QAAAA,QAAQ,EAAEA;AAApB;AADY,KAAD,CAAxB;AAGA,QAAIT,IAAI,CAACA,IAAL,CAAUU,KAAd,EAAqBZ,MAAM,CAACa,IAAP,CAAY,GAAZ,EAArB,KACKC,KAAK,CAAC,uBAAD,CAAL;AACN,GATD;;AAUA,SACE,4BACE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbT,MAAAA,EAAE,EAAE,EADS;AAEbM,MAAAA,QAAQ,EAAE;AAFG,KADjB;AAKE,IAAA,QAAQ,EAAEH,YALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,IAAZ;AAAiB,IAAA,GAAG,EAAEF,IAAtB;AAA4B,IAAA,IAAI,EAAC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,GAAG,EAAEC,UAA5B;AAAwC,IAAA,IAAI,EAAC,UAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,CAPF,CADF,CADF;AAiBD,CAnCD;;AAqCA,eAAeb,UAAU,CAAC;AAAEqB,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA2BhB,IAA3B,CAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport Router from \"next/router\";\nimport { withApollo } from \"../../utils/withApollo\";\nimport { Formik, Form } from \"formik\";\nimport { usePostQuery, useUpdatePostMutation } from \"../../generated/graphql\";\nimport { useGetPostFromUrl } from \"../../utils/useGetPostFromUrl\";\nconst edit: React.FC<{}> = () => {\n  const router = Router;\n  const post = useGetPostFromUrl();\n  const { data, loading } = usePostQuery({\n    variables: { id: post.data.post.id },\n  });\n  const idEl = useRef(null);\n  const passwordEl = useRef(null);\n  let handleSubmit = async () => {\n    // e.preventDefault();\n    const id = idEl.current.value;\n    const password = passwordEl.current.value;\n    const data = await login({\n      variables: { id: id, password: password },\n    });\n    if (data.data.login) router.push(\"/\");\n    else alert(\"authentication failed\");\n  };\n  return (\n    <>\n      <Formik\n        initialValues={{\n          id: {},\n          password: {},\n        }}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <input name=\"id\" ref={idEl} type=\"text\" />\n          <input name=\"password\" ref={passwordEl} type=\"password\" />\n          <button type=\"submit\">submit</button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n\nexport default withApollo({ ssr: false })(edit);\n"]},"metadata":{},"sourceType":"module"}