{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport { Form, Formik } from \"formik\";\nimport Router from \"next/router\";\nimport React, { useRef } from \"react\";\nimport { useLoginMutation } from \"../generated/graphql\";\nimport { withApollo } from \"../utils/withApollo\";\n\nvar admin = function admin() {\n  var router = Router;\n\n  var _useLoginMutation = useLoginMutation(),\n      _useLoginMutation2 = _slicedToArray(_useLoginMutation, 1),\n      login = _useLoginMutation2[0];\n\n  var idEl = useRef(null);\n  var passwordEl = useRef(null);\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var id, password, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // e.preventDefault();\n              id = idEl.current.value;\n              password = passwordEl.current.value;\n              _context.next = 4;\n              return login({\n                variables: {\n                  id: id,\n                  password: password\n                }\n              });\n\n            case 4:\n              data = _context.sent;\n              if (data.data.login) router.push(\"/\");else alert(\"authentication failed\");\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Formik, {\n    initialValues: {\n      id: \"\",\n      password: \"\"\n    },\n    onSubmit: handleSubmit\n  }, __jsx(Form, null, __jsx(\"input\", {\n    name: \"id\",\n    ref: idEl,\n    type: \"text\"\n  }), __jsx(\"input\", {\n    name: \"password\",\n    ref: passwordEl,\n    type: \"password\"\n  }), __jsx(\"button\", {\n    type: \"submit\"\n  }, \"submit\"))));\n};\n\nexport default withApollo({\n  ssr: false\n})(admin);\n3;","map":null,"metadata":{},"sourceType":"module"}