{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/develop/blog/client/pages/newPost.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Box, Button, Input, Textarea } from \"@chakra-ui/core\";\nimport { Form, Formik } from \"formik\";\nimport Router from \"next/router\";\nimport React, { useRef, useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { dark } from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\nimport { useCreatePostMutation } from \"../generated/graphql\";\nimport { withApollo } from \"../utils/withApollo\";\n\nvar edit = function edit() {\n  _s();\n\n  var router = Router;\n\n  var _useState = useState(\"\"),\n      title = _useState[0],\n      setTitle = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      description = _useState2[0],\n      setDescription = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      thumbnail = _useState3[0],\n      setThumbnail = _useState3[1];\n\n  var _useState4 = useState(1),\n      mdState = _useState4[0],\n      setMdState = _useState4[1];\n\n  var _useCreatePostMutatio = useCreatePostMutation(),\n      _useCreatePostMutatio2 = _slicedToArray(_useCreatePostMutatio, 1),\n      createPost = _useCreatePostMutatio2[0];\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"handlesubmit\");\n              _context.next = 3;\n              return createPost({\n                variables: {\n                  input: {\n                    title: title,\n                    description: description,\n                    thumbnail: thumbnail\n                  }\n                }\n              });\n\n            case 3:\n              router.back();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleMd = function handleMd() {\n    if (mdState === 1) {\n      md.current.style.display = \"none\";\n      setMdState(0);\n    } else {\n      md.current.style.display = \"inline\";\n      setMdState(1);\n    }\n  };\n\n  var md = useRef(null);\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    mt: \"10vh\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    w: \"55%\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      title: title,\n      description: description,\n      thumbnail: thumbnail\n    },\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, __jsx(Form, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, __jsx(Input, {\n    textAlign: \"center\",\n    value: title,\n    onChange: function onChange(e) {\n      return setTitle(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }), __jsx(Input, {\n    textAlign: \"center\",\n    value: thumbnail,\n    onChange: function onChange(e) {\n      return setThumbnail(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }), __jsx(Textarea, {\n    h: \"100vh\",\n    value: description,\n    onChange: function onChange(e) {\n      return setDescription(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }), __jsx(Button, {\n    type: \"submit\",\n    ml: \"auto\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, \"submit\"))), __jsx(Button, {\n    onClick: handleMd,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"\\uD3BC\\uCE58\\uAE30\"), __jsx(Box, {\n    ref: md,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, __jsx(ReactMarkdown, {\n    source: description,\n    renderers: {\n      code: Component\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  })))));\n};\n\n_s(edit, \"bVrhSXpY2ZwfuQnaC9TM1RSg+Zc=\", false, function () {\n  return [useCreatePostMutation];\n});\n\nvar Component = function Component(_ref2) {\n  var value = _ref2.value,\n      language = _ref2.language;\n  return __jsx(SyntaxHighlighter, {\n    language: language !== null && language !== void 0 ? language : null,\n    style: dark,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, value !== null && value !== void 0 ? value : \"\");\n};\n\n_c = Component;\nexport default withApollo({\n  ssr: false\n})(edit);\n\nvar _c;\n\n$RefreshReg$(_c, \"Component\");","map":{"version":3,"sources":["/home/develop/blog/client/pages/newPost.tsx"],"names":["Box","Button","Input","Textarea","Form","Formik","Router","React","useRef","useState","ReactMarkdown","SyntaxHighlighter","dark","useCreatePostMutation","withApollo","edit","router","title","setTitle","description","setDescription","thumbnail","setThumbnail","mdState","setMdState","createPost","handleSubmit","console","log","variables","input","back","handleMd","md","current","style","display","e","target","value","code","Component","language","ssr"],"mappings":"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","sourcesContent":["import { Box, Button, Input, Textarea } from \"@chakra-ui/core\"\nimport { Form, Formik } from \"formik\"\nimport Router from \"next/router\"\nimport React, { useRef, useState } from \"react\"\nimport ReactMarkdown from \"react-markdown\"\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { dark } from \"react-syntax-highlighter/dist/cjs/styles/hljs\"\nimport { useCreatePostMutation } from \"../generated/graphql\"\nimport { withApollo } from \"../utils/withApollo\"\n\nconst edit: React.FC<{}> = () => {\n  const router = Router\n  const [title, setTitle] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n  const [thumbnail, setThumbnail] = useState(\"\")\n  const [mdState, setMdState] = useState(1)\n  const [createPost] = useCreatePostMutation()\n  const handleSubmit = async () => {\n    console.log(\"handlesubmit\")\n    await createPost({\n      variables: {\n        input: { title: title, description: description, thumbnail: thumbnail },\n      },\n    })\n    router.back()\n  }\n\n  const handleMd = () => {\n    if (mdState === 1) {\n      md.current.style.display = \"none\"\n      setMdState(0)\n    } else {\n      md.current.style.display = \"inline\"\n      setMdState(1)\n    }\n  }\n  const md = useRef(null)\n\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\" mt=\"10vh\">\n        <Box w=\"55%\">\n          <Formik\n            initialValues={{\n              title: title,\n              description: description,\n              thumbnail: thumbnail\n            }}\n            onSubmit={handleSubmit}\n          >\n            <Form>\n              <Input\n                textAlign=\"center\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n              />\n              <Input\n                textAlign=\"center\"\n                value={thumbnail}\n                onChange={(e) => setThumbnail(e.target.value)}\n              />\n              <Textarea\n                h=\"100vh\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              ></Textarea>\n              <Button type=\"submit\" ml=\"auto\">\n                submit\n              </Button>\n            </Form>\n          </Formik>\n          <Button onClick={handleMd}>펼치기</Button>\n          <Box ref={md}>\n            <ReactMarkdown\n              source={description}\n              renderers={{\n                code: Component,\n              }}\n            ></ReactMarkdown>\n          </Box>\n        </Box>\n      </Box>\n    </>\n  )\n}\n\nconst Component = ({ value, language }) => {\n  return (\n    <SyntaxHighlighter language={language ?? null} style={dark}>\n      {value ?? \"\"}\n    </SyntaxHighlighter>\n  )\n}\n\nexport default withApollo({ ssr: false })(edit)\n"]},"metadata":{},"sourceType":"module"}