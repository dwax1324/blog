{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/develop/blog/client/pages/edit/[id].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef } from \"react\";\nimport Router from \"next/router\";\nimport { withApollo } from \"../../utils/withApollo\";\nimport { Formik, Form } from \"formik\";\nimport { usePostQuery } from \"../../generated/graphql\";\nimport { useGetPostFromUrl } from \"../../utils/useGetPostFromUrl\";\n\nvar edit = function edit() {\n  _s();\n\n  var router = Router;\n  var post = useGetPostFromUrl();\n\n  var _usePostQuery = usePostQuery({\n    variables: post.data.post.id\n  }),\n      data = _usePostQuery.data,\n      loading = _usePostQuery.loading;\n\n  var idEl = useRef(null);\n  var passwordEl = useRef(null);\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var id, password, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // e.preventDefault();\n              id = idEl.current.value;\n              password = passwordEl.current.value;\n              _context.next = 4;\n              return login({\n                variables: {\n                  id: id,\n                  password: password\n                }\n              });\n\n            case 4:\n              data = _context.sent;\n              if (data.data.login) router.push(\"/\");else alert(\"authentication failed\");\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Formik, {\n    initialValues: {\n      id: {},\n      password: {}\n    },\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, __jsx(Form, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    name: \"id\",\n    ref: idEl,\n    type: \"text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }), __jsx(\"input\", {\n    name: \"password\",\n    ref: passwordEl,\n    type: \"password\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, \"submit\"))));\n};\n\n_s(edit, \"pWO4Gk3WNJ0mCuqaJJMofsvTvu4=\", false, function () {\n  return [useGetPostFromUrl, usePostQuery];\n});\n\nexport default withApollo({\n  ssr: false\n})(edit);","map":{"version":3,"sources":["/home/develop/blog/client/pages/edit/[id].tsx"],"names":["React","useRef","Router","withApollo","Formik","Form","usePostQuery","useGetPostFromUrl","edit","router","post","variables","data","id","loading","idEl","passwordEl","handleSubmit","current","value","password","login","push","alert","ssr"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,YAAT,QAAoD,yBAApD;AACA,SAASC,iBAAT,QAAkC,+BAAlC;;AACA,IAAMC,IAAkB,GAAG,SAArBA,IAAqB,GAAM;AAAA;;AAC/B,MAAMC,MAAM,GAAGP,MAAf;AACA,MAAMQ,IAAI,GAAGH,iBAAiB,EAA9B;;AAF+B,sBAGLD,YAAY,CAAC;AACrCK,IAAAA,SAAS,EAAED,IAAI,CAACE,IAAL,CAAUF,IAAV,CAAeG;AADW,GAAD,CAHP;AAAA,MAGvBD,IAHuB,iBAGvBA,IAHuB;AAAA,MAGjBE,OAHiB,iBAGjBA,OAHiB;;AAM/B,MAAMC,IAAI,GAAGd,MAAM,CAAC,IAAD,CAAnB;AACA,MAAMe,UAAU,GAAGf,MAAM,CAAC,IAAD,CAAzB;;AACA,MAAIgB,YAAY;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACjB;AACMJ,cAAAA,EAFW,GAENE,IAAI,CAACG,OAAL,CAAaC,KAFP;AAGXC,cAAAA,QAHW,GAGAJ,UAAU,CAACE,OAAX,CAAmBC,KAHnB;AAAA;AAAA,qBAIEE,KAAK,CAAC;AACvBV,gBAAAA,SAAS,EAAE;AAAEE,kBAAAA,EAAE,EAAEA,EAAN;AAAUO,kBAAAA,QAAQ,EAAEA;AAApB;AADY,eAAD,CAJP;;AAAA;AAIXR,cAAAA,IAJW;AAOjB,kBAAIA,IAAI,CAACA,IAAL,CAAUS,KAAd,EAAqBZ,MAAM,CAACa,IAAP,CAAY,GAAZ,EAArB,KACKC,KAAK,CAAC,uBAAD,CAAL;;AARY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZN,YAAY;AAAA;AAAA;AAAA,KAAhB;;AAUA,SACE,4BACE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbJ,MAAAA,EAAE,EAAE,EADS;AAEbO,MAAAA,QAAQ,EAAE;AAFG,KADjB;AAKE,IAAA,QAAQ,EAAEH,YALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,IAAZ;AAAiB,IAAA,GAAG,EAAEF,IAAtB;AAA4B,IAAA,IAAI,EAAC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,GAAG,EAAEC,UAA5B;AAAwC,IAAA,IAAI,EAAC,UAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,CAPF,CADF,CADF;AAiBD,CAnCD;;GAAMR,I;UAESD,iB,EACaD,Y;;;AAkC5B,eAAeH,UAAU,CAAC;AAAEqB,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA2BhB,IAA3B,CAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport Router from \"next/router\";\nimport { withApollo } from \"../../utils/withApollo\";\nimport { Formik, Form } from \"formik\";\nimport { usePostQuery, useUpdatePostMutation } from \"../../generated/graphql\";\nimport { useGetPostFromUrl } from \"../../utils/useGetPostFromUrl\";\nconst edit: React.FC<{}> = () => {\n  const router = Router;\n  const post = useGetPostFromUrl();\n  const { data, loading } = usePostQuery({\n    variables: post.data.post.id,\n  });\n  const idEl = useRef(null);\n  const passwordEl = useRef(null);\n  let handleSubmit = async () => {\n    // e.preventDefault();\n    const id = idEl.current.value;\n    const password = passwordEl.current.value;\n    const data = await login({\n      variables: { id: id, password: password },\n    });\n    if (data.data.login) router.push(\"/\");\n    else alert(\"authentication failed\");\n  };\n  return (\n    <>\n      <Formik\n        initialValues={{\n          id: {},\n          password: {},\n        }}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <input name=\"id\" ref={idEl} type=\"text\" />\n          <input name=\"password\" ref={passwordEl} type=\"password\" />\n          <button type=\"submit\">submit</button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n\nexport default withApollo({ ssr: false })(edit);\n"]},"metadata":{},"sourceType":"module"}