{"ast":null,"code":"var _jsxFileName = \"/home/develop/blog/client/pages/admin.tsx\";\nvar __jsx = React.createElement;\nimport React, { useRef } from \"react\";\nimport { MeDocument, useLoginMutation } from \"../generated/graphql\";\nimport Router from \"next/router\";\nimport { withApollo } from \"../utils/withApollo\";\nimport { Formik, Form } from \"formik\";\n\nconst admin = () => {\n  const router = Router;\n  const [login] = useLoginMutation();\n  const idEl = useRef(null);\n  const passwordEl = useRef(null);\n\n  let handleSubmit = () => {\n    // e.preventDefault();\n    const id = idEl.current.value;\n    const password = passwordEl.current.value;\n    const requestBody = {\n      query: `\n        mutation{\n          login(id:\"${id}\", password:\"${password}\")\n        }\n      `\n    };\n    fetch(\"http://localhost:4000/graphql\", {\n      method: \"POST\",\n      body: JSON.stringify(requestBody),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error(\"연결실패\");\n      }\n\n      return res.json();\n    }).then(resData => {\n      if (resData.data.login) router.back();else alert(\"authentication failed\");\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Formik, {\n    initialValues: {\n      id: \"\",\n      password: \"\"\n    },\n    onSubmit: async (values, {\n      setErrors\n    }) => {\n      console.log(values.id);\n      const response = await login({\n        variables: values,\n        update: (cache, {\n          data\n        }) => {\n          console.log(cache);\n          cache.writeQuery({\n            query: MeDocument,\n            data: {\n              __typename: \"Query\",\n              me: data === null || data === void 0 ? void 0 : data.login\n            }\n          }); // cache.evict({ fieldName: \"posts:{}\" });\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    name: \"id\",\n    ref: idEl,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), __jsx(\"input\", {\n    name: \"password\",\n    ref: passwordEl,\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, \"submit\"))));\n};\n\nexport default withApollo({\n  ssr: true\n})(admin);","map":{"version":3,"sources":["/home/develop/blog/client/pages/admin.tsx"],"names":["React","useRef","MeDocument","useLoginMutation","Router","withApollo","Formik","Form","admin","router","login","idEl","passwordEl","handleSubmit","id","current","value","password","requestBody","query","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","resData","data","back","alert","catch","err","console","log","values","setErrors","response","variables","update","cache","writeQuery","__typename","me","ssr"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport {\n  LoginDocument,\n  LoginMutation,\n  MeDocument,\n  MeQuery,\n  useLoginMutation,\n} from \"../generated/graphql\";\nimport Router from \"next/router\";\nimport { withApollo } from \"../utils/withApollo\";\nimport { Formik, Form } from \"formik\";\nimport gql from \"gql-tag\";\n\nconst admin: React.FC<{}> = () => {\n  const router = Router;\n  const [login] = useLoginMutation();\n  const idEl = useRef(null);\n  const passwordEl = useRef(null);\n\n  let handleSubmit = () => {\n    // e.preventDefault();\n    const id = idEl.current.value;\n    const password = passwordEl.current.value;\n\n    const requestBody = {\n      query: `\n        mutation{\n          login(id:\"${id}\", password:\"${password}\")\n        }\n      `,\n    };\n\n    fetch(\"http://localhost:4000/graphql\", {\n      method: \"POST\",\n      body: JSON.stringify(requestBody),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error(\"연결실패\");\n        }\n        return res.json();\n      })\n      .then((resData) => {\n        if (resData.data.login) router.back();\n        else alert(\"authentication failed\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  return (\n    <>\n      <Formik\n        initialValues={{\n          id: \"\",\n          password: \"\",\n        }}\n        onSubmit={async (values, { setErrors }) => {\n          console.log(values.id);\n          const response = await login({\n            variables: values,\n            update: (cache, { data }) => {\n              console.log(cache);\n              cache.writeQuery<MeQuery>({\n                query: MeDocument,\n                data: {\n                  __typename: \"Query\",\n                  me: data?.login,\n                },\n              });\n              // cache.evict({ fieldName: \"posts:{}\" });\n            },\n          });\n        }}\n      >\n        <Form>\n          <input name=\"id\" ref={idEl} type=\"text\" />\n          <input name=\"password\" ref={passwordEl} type=\"password\" />\n          <button type=\"submit\">submit</button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n\nexport default withApollo({ ssr: true })(admin);\n"]},"metadata":{},"sourceType":"module"}