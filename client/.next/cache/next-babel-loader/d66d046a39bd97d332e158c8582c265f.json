{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Router from \"next/router\";\nimport { withApollo } from \"../../utils/withApollo\";\nimport { Formik, Form } from \"formik\";\nimport { useGetPostFromUrl } from \"../../utils/useGetPostFromUrl\";\nimport { Box, Button, Input, Textarea } from \"@chakra-ui/core\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { dark } from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\nimport { useUpdatePostMutation } from \"../../generated/graphql\";\n\nconst edit = () => {\n  const router = Router;\n  const {\n    data\n  } = useGetPostFromUrl();\n  const {\n    0: title,\n    1: setTitle\n  } = useState(\"\");\n  const {\n    0: description,\n    1: setDescription\n  } = useState(\"\");\n  const {\n    0: thumbnail,\n    1: setThumbnail\n  } = useState(\"\");\n  const {\n    0: mdState,\n    1: setMdState\n  } = useState(1);\n  const [updatePost] = useUpdatePostMutation();\n\n  const handleSubmit = async () => {\n    console.log(\"handlesubmit\");\n    await updatePost({\n      variables: {\n        id: parseInt(data === null || data === void 0 ? void 0 : data.post.id),\n        input: {\n          title: title,\n          description: description,\n          thumbnail: thumbnail\n        }\n      }\n    });\n    router.back();\n  };\n\n  const handleMd = () => {\n    if (mdState === 1) {\n      md.current.style.display = \"none\";\n      setMdState(0);\n    } else {\n      md.current.style.display = \"inline\";\n      setMdState(1);\n    }\n  };\n\n  const md = useRef(null);\n  useEffect(() => {\n    if (data) {\n      setTitle(data.post.title);\n      setDescription(data.post.description);\n      setThumbnail(data.post.thumbnail);\n    }\n  }, [data]);\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    mt: \"10vh\"\n  }, !data ? __jsx(\"div\", null, \"\\u3164\") : __jsx(Box, {\n    w: \"55%\"\n  }, __jsx(Formik, {\n    initialValues: {\n      title: title,\n      description: description,\n      thumbnail: thumbnail\n    },\n    onSubmit: handleSubmit\n  }, __jsx(Form, null, __jsx(Input, {\n    textAlign: \"center\",\n    value: title,\n    onChange: e => setTitle(e.target.value)\n  }), __jsx(Input, {\n    textAlign: \"center\",\n    value: thumbnail,\n    onChange: e => setThumbnail(e.target.value)\n  }), __jsx(Textarea, {\n    h: \"100vh\",\n    value: description,\n    onChange: e => setDescription(e.target.value)\n  }), __jsx(Button, {\n    type: \"submit\",\n    ml: \"auto\"\n  }, \"submit\"))), __jsx(Button, {\n    onClick: handleMd\n  }, \"\\uD3BC\\uCE58\\uAE30\"), __jsx(Box, {\n    ref: md\n  }))));\n};\n\nconst Component = ({\n  value,\n  language\n}) => {\n  return __jsx(SyntaxHighlighter, {\n    language: language !== null && language !== void 0 ? language : null,\n    style: dark\n  }, value !== null && value !== void 0 ? value : \"\");\n};\n\nexport default withApollo({\n  ssr: false\n})(edit);","map":null,"metadata":{},"sourceType":"module"}