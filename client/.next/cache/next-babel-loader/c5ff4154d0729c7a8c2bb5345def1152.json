{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$(),\n    _s15 = $RefreshSig$(),\n    _s16 = $RefreshSig$(),\n    _s17 = $RefreshSig$(),\n    _s18 = $RefreshSig$(),\n    _s19 = $RefreshSig$();\n\nfunction _templateObject15() {\n  var data = _taggedTemplateLiteral([\"\\n    query Tags {\\n  tags {\\n    id\\n    text\\n    postsLength\\n    posts {\\n      id\\n      title\\n      description\\n      createdAt\\n      updatedAt\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject15 = function _templateObject15() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject14() {\n  var data = _taggedTemplateLiteral([\"\\n    query Tag($id: Int!) {\\n  tag(id: $id) {\\n    postsLength\\n    id\\n    text\\n    posts {\\n      id\\n      title\\n      description\\n      updatedAt\\n      createdAt\\n      tags {\\n        id\\n        text\\n      }\\n      thumbnail\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject14 = function _templateObject14() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject13() {\n  var data = _taggedTemplateLiteral([\"\\n    query Posts {\\n  posts {\\n    ...RegularDetails\\n    tags {\\n      id\\n      text\\n    }\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject13 = function _templateObject13() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n    query Post($id: Int!) {\\n  post(id: $id) {\\n    ...RegularDetails\\n    tags {\\n      id\\n      text\\n    }\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n    query Me {\\n  me\\n}\\n    \"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UpdatePost($id: Int!, $input: postInput!) {\\n  updatePost(id: $id, input: $input) {\\n    ...RegularDetails\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Logout {\\n  logout\\n}\\n    \"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Login($id: String!, $password: String!) {\\n  login(id: $id, password: $password)\\n}\\n    \"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation DeleteTagPost($postId: Int!, $tagId: Int!) {\\n  deleteTagPost(postId: $postId, tagId: $tagId)\\n}\\n    \"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation DeleteTag($tagId: Int!) {\\n  deleteTag(tagId: $tagId)\\n}\\n    \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation DeletePost($postId: Int!) {\\n  deletePost(postId: $postId)\\n}\\n    \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreateTag($text: String!) {\\n  createTag(text: $text) {\\n    id\\n    text\\n    posts {\\n      id\\n      title\\n      description\\n      updatedAt\\n      createdAt\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreatePost($input: postInput!) {\\n  createPost(input: $input) {\\n    ...RegularDetails\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation AddTagPost($postId: Int!, $tagId: Int!) {\\n  addTagPost(postId: $postId, tagId: $tagId)\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularDetails on Post {\\n  id\\n  title\\n  description\\n  createdAt\\n  updatedAt\\n  thumbnail\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport var RegularDetailsFragmentDoc = gql(_templateObject());\nexport var AddTagPostDocument = gql(_templateObject2());\n\n/**\n * __useAddTagPostMutation__\n *\n * To run a mutation, you first call `useAddTagPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTagPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTagPostMutation, { data, loading, error }] = useAddTagPostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *      tagId: // value for 'tagId'\n *   },\n * });\n */\nexport function useAddTagPostMutation(baseOptions) {\n  _s();\n\n  return Apollo.useMutation(AddTagPostDocument, baseOptions);\n}\n\n_s(useAddTagPostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreatePostDocument = gql(_templateObject3(), RegularDetailsFragmentDoc);\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions) {\n  _s2();\n\n  return Apollo.useMutation(CreatePostDocument, baseOptions);\n}\n\n_s2(useCreatePostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreateTagDocument = gql(_templateObject4());\n\n/**\n * __useCreateTagMutation__\n *\n * To run a mutation, you first call `useCreateTagMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTagMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTagMutation, { data, loading, error }] = useCreateTagMutation({\n *   variables: {\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useCreateTagMutation(baseOptions) {\n  _s3();\n\n  return Apollo.useMutation(CreateTagDocument, baseOptions);\n}\n\n_s3(useCreateTagMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var DeletePostDocument = gql(_templateObject5());\n\n/**\n * __useDeletePostMutation__\n *\n * To run a mutation, you first call `useDeletePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePostMutation, { data, loading, error }] = useDeletePostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *   },\n * });\n */\nexport function useDeletePostMutation(baseOptions) {\n  _s4();\n\n  return Apollo.useMutation(DeletePostDocument, baseOptions);\n}\n\n_s4(useDeletePostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var DeleteTagDocument = gql(_templateObject6());\n\n/**\n * __useDeleteTagMutation__\n *\n * To run a mutation, you first call `useDeleteTagMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTagMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTagMutation, { data, loading, error }] = useDeleteTagMutation({\n *   variables: {\n *      tagId: // value for 'tagId'\n *   },\n * });\n */\nexport function useDeleteTagMutation(baseOptions) {\n  _s5();\n\n  return Apollo.useMutation(DeleteTagDocument, baseOptions);\n}\n\n_s5(useDeleteTagMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var DeleteTagPostDocument = gql(_templateObject7());\n\n/**\n * __useDeleteTagPostMutation__\n *\n * To run a mutation, you first call `useDeleteTagPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTagPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTagPostMutation, { data, loading, error }] = useDeleteTagPostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *      tagId: // value for 'tagId'\n *   },\n * });\n */\nexport function useDeleteTagPostMutation(baseOptions) {\n  _s6();\n\n  return Apollo.useMutation(DeleteTagPostDocument, baseOptions);\n}\n\n_s6(useDeleteTagPostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LoginDocument = gql(_templateObject8());\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      id: // value for 'id'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  _s7();\n\n  return Apollo.useMutation(LoginDocument, baseOptions);\n}\n\n_s7(useLoginMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var LogoutDocument = gql(_templateObject9());\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  _s8();\n\n  return Apollo.useMutation(LogoutDocument, baseOptions);\n}\n\n_s8(useLogoutMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var UpdatePostDocument = gql(_templateObject10(), RegularDetailsFragmentDoc);\n\n/**\n * __useUpdatePostMutation__\n *\n * To run a mutation, you first call `useUpdatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePostMutation, { data, loading, error }] = useUpdatePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdatePostMutation(baseOptions) {\n  _s9();\n\n  return Apollo.useMutation(UpdatePostDocument, baseOptions);\n}\n\n_s9(useUpdatePostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var MeDocument = gql(_templateObject11());\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  _s10();\n\n  return Apollo.useQuery(MeDocument, baseOptions);\n}\n\n_s10(useMeQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMeLazyQuery(baseOptions) {\n  _s11();\n\n  return Apollo.useLazyQuery(MeDocument, baseOptions);\n}\n\n_s11(useMeLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var PostDocument = gql(_templateObject12(), RegularDetailsFragmentDoc);\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function usePostQuery(baseOptions) {\n  _s12();\n\n  return Apollo.useQuery(PostDocument, baseOptions);\n}\n\n_s12(usePostQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function usePostLazyQuery(baseOptions) {\n  _s13();\n\n  return Apollo.useLazyQuery(PostDocument, baseOptions);\n}\n\n_s13(usePostLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var PostsDocument = gql(_templateObject13(), RegularDetailsFragmentDoc);\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function usePostsQuery(baseOptions) {\n  _s14();\n\n  return Apollo.useQuery(PostsDocument, baseOptions);\n}\n\n_s14(usePostsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function usePostsLazyQuery(baseOptions) {\n  _s15();\n\n  return Apollo.useLazyQuery(PostsDocument, baseOptions);\n}\n\n_s15(usePostsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var TagDocument = gql(_templateObject14());\n/**\n * __useTagQuery__\n *\n * To run a query within a React component, call `useTagQuery` and pass it any options that fit your needs.\n * When your component renders, `useTagQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTagQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useTagQuery(baseOptions) {\n  _s16();\n\n  return Apollo.useQuery(TagDocument, baseOptions);\n}\n\n_s16(useTagQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useTagLazyQuery(baseOptions) {\n  _s17();\n\n  return Apollo.useLazyQuery(TagDocument, baseOptions);\n}\n\n_s17(useTagLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport var TagsDocument = gql(_templateObject15());\n/**\n * __useTagsQuery__\n *\n * To run a query within a React component, call `useTagsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTagsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useTagsQuery(baseOptions) {\n  _s18();\n\n  return Apollo.useQuery(TagsDocument, baseOptions);\n}\n\n_s18(useTagsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useTagsLazyQuery(baseOptions) {\n  _s19();\n\n  return Apollo.useLazyQuery(TagsDocument, baseOptions);\n}\n\n_s19(useTagsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"sources":["/home/develop/blog/client/generated/graphql.tsx"],"names":["gql","Apollo","RegularDetailsFragmentDoc","AddTagPostDocument","useAddTagPostMutation","baseOptions","useMutation","CreatePostDocument","useCreatePostMutation","CreateTagDocument","useCreateTagMutation","DeletePostDocument","useDeletePostMutation","DeleteTagDocument","useDeleteTagMutation","DeleteTagPostDocument","useDeleteTagPostMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","UpdatePostDocument","useUpdatePostMutation","MeDocument","useMeQuery","useQuery","useMeLazyQuery","useLazyQuery","PostDocument","usePostQuery","usePostLazyQuery","PostsDocument","usePostsQuery","usePostsLazyQuery","TagDocument","useTagQuery","useTagLazyQuery","TagsDocument","useTagsQuery","useTagsLazyQuery"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  hello: Scalars['String'];\n  me: Scalars['Boolean'];\n  posts: Array<Post>;\n  tags: Array<Tag>;\n  post?: Maybe<Post>;\n  tag?: Maybe<Tag>;\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryTagArgs = {\n  id: Scalars['Int'];\n};\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['ID'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  thumbnail: Scalars['String'];\n  tags?: Maybe<Array<Tag>>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type Tag = {\n  __typename?: 'Tag';\n  id: Scalars['Int'];\n  text: Scalars['String'];\n  posts?: Maybe<Array<Post>>;\n  postsLength?: Maybe<Scalars['Int']>;\n};\n\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  login: Scalars['Boolean'];\n  logout: Scalars['Boolean'];\n  updatePost: Post;\n  createPost: Post;\n  createTag: Tag;\n  addTagPost: Scalars['Boolean'];\n  deleteTagPost: Scalars['Boolean'];\n  deletePost: Scalars['Boolean'];\n  deleteTag: Scalars['Boolean'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  id: Scalars['String'];\n};\n\n\nexport type MutationUpdatePostArgs = {\n  input: PostInput;\n  id: Scalars['Int'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  input: PostInput;\n};\n\n\nexport type MutationCreateTagArgs = {\n  text: Scalars['String'];\n};\n\n\nexport type MutationAddTagPostArgs = {\n  postId: Scalars['Int'];\n  tagId: Scalars['Int'];\n};\n\n\nexport type MutationDeleteTagPostArgs = {\n  postId: Scalars['Int'];\n  tagId: Scalars['Int'];\n};\n\n\nexport type MutationDeletePostArgs = {\n  postId: Scalars['Int'];\n};\n\n\nexport type MutationDeleteTagArgs = {\n  tagId: Scalars['Int'];\n};\n\nexport type PostInput = {\n  title: Scalars['String'];\n  description: Scalars['String'];\n  thumbnail: Scalars['String'];\n};\n\nexport type RegularDetailsFragment = (\n  { __typename?: 'Post' }\n  & Pick<Post, 'id' | 'title' | 'description' | 'createdAt' | 'updatedAt' | 'thumbnail'>\n);\n\nexport type AddTagPostMutationVariables = Exact<{\n  postId: Scalars['Int'];\n  tagId: Scalars['Int'];\n}>;\n\n\nexport type AddTagPostMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addTagPost'>\n);\n\nexport type CreatePostMutationVariables = Exact<{\n  input: PostInput;\n}>;\n\n\nexport type CreatePostMutation = (\n  { __typename?: 'Mutation' }\n  & { createPost: (\n    { __typename?: 'Post' }\n    & RegularDetailsFragment\n  ) }\n);\n\nexport type CreateTagMutationVariables = Exact<{\n  text: Scalars['String'];\n}>;\n\n\nexport type CreateTagMutation = (\n  { __typename?: 'Mutation' }\n  & { createTag: (\n    { __typename?: 'Tag' }\n    & Pick<Tag, 'id' | 'text'>\n    & { posts?: Maybe<Array<(\n      { __typename?: 'Post' }\n      & Pick<Post, 'id' | 'title' | 'description' | 'updatedAt' | 'createdAt'>\n    )>> }\n  ) }\n);\n\nexport type DeletePostMutationVariables = Exact<{\n  postId: Scalars['Int'];\n}>;\n\n\nexport type DeletePostMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deletePost'>\n);\n\nexport type DeleteTagMutationVariables = Exact<{\n  tagId: Scalars['Int'];\n}>;\n\n\nexport type DeleteTagMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTag'>\n);\n\nexport type DeleteTagPostMutationVariables = Exact<{\n  postId: Scalars['Int'];\n  tagId: Scalars['Int'];\n}>;\n\n\nexport type DeleteTagPostMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTagPost'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  id: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'login'>\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type UpdatePostMutationVariables = Exact<{\n  id: Scalars['Int'];\n  input: PostInput;\n}>;\n\n\nexport type UpdatePostMutation = (\n  { __typename?: 'Mutation' }\n  & { updatePost: (\n    { __typename?: 'Post' }\n    & RegularDetailsFragment\n  ) }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'me'>\n);\n\nexport type PostQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type PostQuery = (\n  { __typename?: 'Query' }\n  & { post?: Maybe<(\n    { __typename?: 'Post' }\n    & { tags?: Maybe<Array<(\n      { __typename?: 'Tag' }\n      & Pick<Tag, 'id' | 'text'>\n    )>> }\n    & RegularDetailsFragment\n  )> }\n);\n\nexport type PostsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PostsQuery = (\n  { __typename?: 'Query' }\n  & { posts: Array<(\n    { __typename?: 'Post' }\n    & { tags?: Maybe<Array<(\n      { __typename?: 'Tag' }\n      & Pick<Tag, 'id' | 'text'>\n    )>> }\n    & RegularDetailsFragment\n  )> }\n);\n\nexport type TagQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type TagQuery = (\n  { __typename?: 'Query' }\n  & { tag?: Maybe<(\n    { __typename?: 'Tag' }\n    & Pick<Tag, 'postsLength' | 'id' | 'text'>\n    & { posts?: Maybe<Array<(\n      { __typename?: 'Post' }\n      & Pick<Post, 'id' | 'title' | 'description' | 'updatedAt' | 'createdAt' | 'thumbnail'>\n      & { tags?: Maybe<Array<(\n        { __typename?: 'Tag' }\n        & Pick<Tag, 'id' | 'text'>\n      )>> }\n    )>> }\n  )> }\n);\n\nexport type TagsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type TagsQuery = (\n  { __typename?: 'Query' }\n  & { tags: Array<(\n    { __typename?: 'Tag' }\n    & Pick<Tag, 'id' | 'text' | 'postsLength'>\n    & { posts?: Maybe<Array<(\n      { __typename?: 'Post' }\n      & Pick<Post, 'id' | 'title' | 'description' | 'createdAt' | 'updatedAt'>\n    )>> }\n  )> }\n);\n\nexport const RegularDetailsFragmentDoc = gql`\n    fragment RegularDetails on Post {\n  id\n  title\n  description\n  createdAt\n  updatedAt\n  thumbnail\n}\n    `;\nexport const AddTagPostDocument = gql`\n    mutation AddTagPost($postId: Int!, $tagId: Int!) {\n  addTagPost(postId: $postId, tagId: $tagId)\n}\n    `;\nexport type AddTagPostMutationFn = Apollo.MutationFunction<AddTagPostMutation, AddTagPostMutationVariables>;\n\n/**\n * __useAddTagPostMutation__\n *\n * To run a mutation, you first call `useAddTagPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTagPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTagPostMutation, { data, loading, error }] = useAddTagPostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *      tagId: // value for 'tagId'\n *   },\n * });\n */\nexport function useAddTagPostMutation(baseOptions?: Apollo.MutationHookOptions<AddTagPostMutation, AddTagPostMutationVariables>) {\n        return Apollo.useMutation<AddTagPostMutation, AddTagPostMutationVariables>(AddTagPostDocument, baseOptions);\n      }\nexport type AddTagPostMutationHookResult = ReturnType<typeof useAddTagPostMutation>;\nexport type AddTagPostMutationResult = Apollo.MutationResult<AddTagPostMutation>;\nexport type AddTagPostMutationOptions = Apollo.BaseMutationOptions<AddTagPostMutation, AddTagPostMutationVariables>;\nexport const CreatePostDocument = gql`\n    mutation CreatePost($input: postInput!) {\n  createPost(input: $input) {\n    ...RegularDetails\n  }\n}\n    ${RegularDetailsFragmentDoc}`;\nexport type CreatePostMutationFn = Apollo.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions?: Apollo.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {\n        return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, baseOptions);\n      }\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\nexport type CreatePostMutationResult = Apollo.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;\nexport const CreateTagDocument = gql`\n    mutation CreateTag($text: String!) {\n  createTag(text: $text) {\n    id\n    text\n    posts {\n      id\n      title\n      description\n      updatedAt\n      createdAt\n    }\n  }\n}\n    `;\nexport type CreateTagMutationFn = Apollo.MutationFunction<CreateTagMutation, CreateTagMutationVariables>;\n\n/**\n * __useCreateTagMutation__\n *\n * To run a mutation, you first call `useCreateTagMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTagMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTagMutation, { data, loading, error }] = useCreateTagMutation({\n *   variables: {\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useCreateTagMutation(baseOptions?: Apollo.MutationHookOptions<CreateTagMutation, CreateTagMutationVariables>) {\n        return Apollo.useMutation<CreateTagMutation, CreateTagMutationVariables>(CreateTagDocument, baseOptions);\n      }\nexport type CreateTagMutationHookResult = ReturnType<typeof useCreateTagMutation>;\nexport type CreateTagMutationResult = Apollo.MutationResult<CreateTagMutation>;\nexport type CreateTagMutationOptions = Apollo.BaseMutationOptions<CreateTagMutation, CreateTagMutationVariables>;\nexport const DeletePostDocument = gql`\n    mutation DeletePost($postId: Int!) {\n  deletePost(postId: $postId)\n}\n    `;\nexport type DeletePostMutationFn = Apollo.MutationFunction<DeletePostMutation, DeletePostMutationVariables>;\n\n/**\n * __useDeletePostMutation__\n *\n * To run a mutation, you first call `useDeletePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePostMutation, { data, loading, error }] = useDeletePostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *   },\n * });\n */\nexport function useDeletePostMutation(baseOptions?: Apollo.MutationHookOptions<DeletePostMutation, DeletePostMutationVariables>) {\n        return Apollo.useMutation<DeletePostMutation, DeletePostMutationVariables>(DeletePostDocument, baseOptions);\n      }\nexport type DeletePostMutationHookResult = ReturnType<typeof useDeletePostMutation>;\nexport type DeletePostMutationResult = Apollo.MutationResult<DeletePostMutation>;\nexport type DeletePostMutationOptions = Apollo.BaseMutationOptions<DeletePostMutation, DeletePostMutationVariables>;\nexport const DeleteTagDocument = gql`\n    mutation DeleteTag($tagId: Int!) {\n  deleteTag(tagId: $tagId)\n}\n    `;\nexport type DeleteTagMutationFn = Apollo.MutationFunction<DeleteTagMutation, DeleteTagMutationVariables>;\n\n/**\n * __useDeleteTagMutation__\n *\n * To run a mutation, you first call `useDeleteTagMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTagMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTagMutation, { data, loading, error }] = useDeleteTagMutation({\n *   variables: {\n *      tagId: // value for 'tagId'\n *   },\n * });\n */\nexport function useDeleteTagMutation(baseOptions?: Apollo.MutationHookOptions<DeleteTagMutation, DeleteTagMutationVariables>) {\n        return Apollo.useMutation<DeleteTagMutation, DeleteTagMutationVariables>(DeleteTagDocument, baseOptions);\n      }\nexport type DeleteTagMutationHookResult = ReturnType<typeof useDeleteTagMutation>;\nexport type DeleteTagMutationResult = Apollo.MutationResult<DeleteTagMutation>;\nexport type DeleteTagMutationOptions = Apollo.BaseMutationOptions<DeleteTagMutation, DeleteTagMutationVariables>;\nexport const DeleteTagPostDocument = gql`\n    mutation DeleteTagPost($postId: Int!, $tagId: Int!) {\n  deleteTagPost(postId: $postId, tagId: $tagId)\n}\n    `;\nexport type DeleteTagPostMutationFn = Apollo.MutationFunction<DeleteTagPostMutation, DeleteTagPostMutationVariables>;\n\n/**\n * __useDeleteTagPostMutation__\n *\n * To run a mutation, you first call `useDeleteTagPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTagPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTagPostMutation, { data, loading, error }] = useDeleteTagPostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *      tagId: // value for 'tagId'\n *   },\n * });\n */\nexport function useDeleteTagPostMutation(baseOptions?: Apollo.MutationHookOptions<DeleteTagPostMutation, DeleteTagPostMutationVariables>) {\n        return Apollo.useMutation<DeleteTagPostMutation, DeleteTagPostMutationVariables>(DeleteTagPostDocument, baseOptions);\n      }\nexport type DeleteTagPostMutationHookResult = ReturnType<typeof useDeleteTagPostMutation>;\nexport type DeleteTagPostMutationResult = Apollo.MutationResult<DeleteTagPostMutation>;\nexport type DeleteTagPostMutationOptions = Apollo.BaseMutationOptions<DeleteTagPostMutation, DeleteTagPostMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($id: String!, $password: String!) {\n  login(id: $id, password: $password)\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      id: // value for 'id'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const UpdatePostDocument = gql`\n    mutation UpdatePost($id: Int!, $input: postInput!) {\n  updatePost(id: $id, input: $input) {\n    ...RegularDetails\n  }\n}\n    ${RegularDetailsFragmentDoc}`;\nexport type UpdatePostMutationFn = Apollo.MutationFunction<UpdatePostMutation, UpdatePostMutationVariables>;\n\n/**\n * __useUpdatePostMutation__\n *\n * To run a mutation, you first call `useUpdatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePostMutation, { data, loading, error }] = useUpdatePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdatePostMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePostMutation, UpdatePostMutationVariables>) {\n        return Apollo.useMutation<UpdatePostMutation, UpdatePostMutationVariables>(UpdatePostDocument, baseOptions);\n      }\nexport type UpdatePostMutationHookResult = ReturnType<typeof useUpdatePostMutation>;\nexport type UpdatePostMutationResult = Apollo.MutationResult<UpdatePostMutation>;\nexport type UpdatePostMutationOptions = Apollo.BaseMutationOptions<UpdatePostMutation, UpdatePostMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const PostDocument = gql`\n    query Post($id: Int!) {\n  post(id: $id) {\n    ...RegularDetails\n    tags {\n      id\n      text\n    }\n  }\n}\n    ${RegularDetailsFragmentDoc}`;\n\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function usePostQuery(baseOptions?: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>) {\n        return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);\n      }\nexport function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {\n          return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);\n        }\nexport type PostQueryHookResult = ReturnType<typeof usePostQuery>;\nexport type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;\nexport type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;\nexport const PostsDocument = gql`\n    query Posts {\n  posts {\n    ...RegularDetails\n    tags {\n      id\n      text\n    }\n  }\n}\n    ${RegularDetailsFragmentDoc}`;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions?: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        return Apollo.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n      }\nexport function usePostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = Apollo.QueryResult<PostsQuery, PostsQueryVariables>;\nexport const TagDocument = gql`\n    query Tag($id: Int!) {\n  tag(id: $id) {\n    postsLength\n    id\n    text\n    posts {\n      id\n      title\n      description\n      updatedAt\n      createdAt\n      tags {\n        id\n        text\n      }\n      thumbnail\n    }\n  }\n}\n    `;\n\n/**\n * __useTagQuery__\n *\n * To run a query within a React component, call `useTagQuery` and pass it any options that fit your needs.\n * When your component renders, `useTagQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTagQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useTagQuery(baseOptions?: Apollo.QueryHookOptions<TagQuery, TagQueryVariables>) {\n        return Apollo.useQuery<TagQuery, TagQueryVariables>(TagDocument, baseOptions);\n      }\nexport function useTagLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TagQuery, TagQueryVariables>) {\n          return Apollo.useLazyQuery<TagQuery, TagQueryVariables>(TagDocument, baseOptions);\n        }\nexport type TagQueryHookResult = ReturnType<typeof useTagQuery>;\nexport type TagLazyQueryHookResult = ReturnType<typeof useTagLazyQuery>;\nexport type TagQueryResult = Apollo.QueryResult<TagQuery, TagQueryVariables>;\nexport const TagsDocument = gql`\n    query Tags {\n  tags {\n    id\n    text\n    postsLength\n    posts {\n      id\n      title\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n    `;\n\n/**\n * __useTagsQuery__\n *\n * To run a query within a React component, call `useTagsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTagsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useTagsQuery(baseOptions?: Apollo.QueryHookOptions<TagsQuery, TagsQueryVariables>) {\n        return Apollo.useQuery<TagsQuery, TagsQueryVariables>(TagsDocument, baseOptions);\n      }\nexport function useTagsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TagsQuery, TagsQueryVariables>) {\n          return Apollo.useLazyQuery<TagsQuery, TagsQueryVariables>(TagsDocument, baseOptions);\n        }\nexport type TagsQueryHookResult = ReturnType<typeof useTagsQuery>;\nexport type TagsLazyQueryHookResult = ReturnType<typeof useTagsLazyQuery>;\nexport type TagsQueryResult = Apollo.QueryResult<TagsQuery, TagsQueryVariables>;"]},"metadata":{},"sourceType":"module"}