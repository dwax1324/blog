{"ast":null,"code":"import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport const AddTagPostDocument = gql`\n    mutation AddTagPost($postId: Int!, $tagId: Int!) {\n  addTagPost(postId: $postId, tagId: $tagId)\n}\n    `;\n\n/**\n * __useAddTagPostMutation__\n *\n * To run a mutation, you first call `useAddTagPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTagPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTagPostMutation, { data, loading, error }] = useAddTagPostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *      tagId: // value for 'tagId'\n *   },\n * });\n */\nexport function useAddTagPostMutation(baseOptions) {\n  return Apollo.useMutation(AddTagPostDocument, baseOptions);\n}\nexport const CreatePostDocument = gql`\n    mutation CreatePost($input: postInput!) {\n  createPost(input: $input) {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n  }\n}\n    `;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions) {\n  return Apollo.useMutation(CreatePostDocument, baseOptions);\n}\nexport const CreateTagDocument = gql`\n    mutation CreateTag($text: String!) {\n  createTag(text: $text) {\n    id\n    text\n    posts {\n      id\n      title\n      description\n      updatedAt\n      createdAt\n    }\n  }\n}\n    `;\n\n/**\n * __useCreateTagMutation__\n *\n * To run a mutation, you first call `useCreateTagMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTagMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTagMutation, { data, loading, error }] = useCreateTagMutation({\n *   variables: {\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useCreateTagMutation(baseOptions) {\n  return Apollo.useMutation(CreateTagDocument, baseOptions);\n}\nexport const DeletePostDocument = gql`\n    mutation DeletePost($postId: Int!) {\n  deletePost(postId: $postId)\n}\n    `;\n\n/**\n * __useDeletePostMutation__\n *\n * To run a mutation, you first call `useDeletePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePostMutation, { data, loading, error }] = useDeletePostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *   },\n * });\n */\nexport function useDeletePostMutation(baseOptions) {\n  return Apollo.useMutation(DeletePostDocument, baseOptions);\n}\nexport const DeleteTagDocument = gql`\n    mutation DeleteTag($tagId: Int!) {\n  deleteTag(tagId: $tagId)\n}\n    `;\n\n/**\n * __useDeleteTagMutation__\n *\n * To run a mutation, you first call `useDeleteTagMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTagMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTagMutation, { data, loading, error }] = useDeleteTagMutation({\n *   variables: {\n *      tagId: // value for 'tagId'\n *   },\n * });\n */\nexport function useDeleteTagMutation(baseOptions) {\n  return Apollo.useMutation(DeleteTagDocument, baseOptions);\n}\nexport const LoginDocument = gql`\n    mutation Login($id: String!, $password: String!) {\n  login(id: $id, password: $password)\n}\n    `;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      id: // value for 'id'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  return Apollo.useMutation(LoginDocument, baseOptions);\n}\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  return Apollo.useMutation(LogoutDocument, baseOptions);\n}\nexport const UpdatePostDocument = gql`\n    mutation UpdatePost($id: Int!, $input: postInput!) {\n  updatePost(id: $id, input: $input) {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n  }\n}\n    `;\n\n/**\n * __useUpdatePostMutation__\n *\n * To run a mutation, you first call `useUpdatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePostMutation, { data, loading, error }] = useUpdatePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdatePostMutation(baseOptions) {\n  return Apollo.useMutation(UpdatePostDocument, baseOptions);\n}\nexport const MeDocument = gql`\n    query Me {\n  me\n}\n    `;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  return Apollo.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(MeDocument, baseOptions);\n}\nexport const PostDocument = gql`\n    query Post($id: Int!) {\n  post(id: $id) {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n    tags {\n      id\n      text\n    }\n  }\n}\n    `;\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function usePostQuery(baseOptions) {\n  return Apollo.useQuery(PostDocument, baseOptions);\n}\nexport function usePostLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(PostDocument, baseOptions);\n}\nexport const PostsDocument = gql`\n    query Posts {\n  posts {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n    tags {\n      id\n      text\n    }\n  }\n}\n    `;\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function usePostsQuery(baseOptions) {\n  return Apollo.useQuery(PostsDocument, baseOptions);\n}\nexport function usePostsLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(PostsDocument, baseOptions);\n}\nexport const TagsDocument = gql`\n    query Tags {\n  tags {\n    id\n    text\n    postsLength\n  }\n}\n    `;\n/**\n * __useTagsQuery__\n *\n * To run a query within a React component, call `useTagsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTagsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useTagsQuery(baseOptions) {\n  return Apollo.useQuery(TagsDocument, baseOptions);\n}\nexport function useTagsLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(TagsDocument, baseOptions);\n}","map":{"version":3,"sources":["/home/develop/blog/client/generated/graphql.tsx"],"names":["gql","Apollo","AddTagPostDocument","useAddTagPostMutation","baseOptions","useMutation","CreatePostDocument","useCreatePostMutation","CreateTagDocument","useCreateTagMutation","DeletePostDocument","useDeletePostMutation","DeleteTagDocument","useDeleteTagMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","UpdatePostDocument","useUpdatePostMutation","MeDocument","useMeQuery","useQuery","useMeLazyQuery","useLazyQuery","PostDocument","usePostQuery","usePostLazyQuery","PostsDocument","usePostsQuery","usePostsLazyQuery","TagsDocument","useTagsQuery","useTagsLazyQuery"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  hello: Scalars['String'];\n  me: Scalars['Boolean'];\n  posts: Array<Post>;\n  tags: Array<Tag>;\n  post?: Maybe<Post>;\n};\n\n\nexport type QueryPostArgs = {\n  id: Scalars['Int'];\n};\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['ID'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  tags?: Maybe<Array<Tag>>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type Tag = {\n  __typename?: 'Tag';\n  id: Scalars['Int'];\n  text: Scalars['String'];\n  posts?: Maybe<Array<Post>>;\n  postsLength?: Maybe<Scalars['Int']>;\n};\n\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  login: Scalars['Boolean'];\n  logout: Scalars['Boolean'];\n  updatePost: Post;\n  createPost: Post;\n  createTag: Tag;\n  addTagPost: Scalars['Boolean'];\n  deletePost: Scalars['Boolean'];\n  deleteTag: Scalars['Boolean'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  id: Scalars['String'];\n};\n\n\nexport type MutationUpdatePostArgs = {\n  input: PostInput;\n  id: Scalars['Int'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  input: PostInput;\n};\n\n\nexport type MutationCreateTagArgs = {\n  text: Scalars['String'];\n};\n\n\nexport type MutationAddTagPostArgs = {\n  postId: Scalars['Int'];\n  tagId: Scalars['Int'];\n};\n\n\nexport type MutationDeletePostArgs = {\n  postId: Scalars['Int'];\n};\n\n\nexport type MutationDeleteTagArgs = {\n  tagId: Scalars['Int'];\n};\n\nexport type PostInput = {\n  title: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type AddTagPostMutationVariables = Exact<{\n  postId: Scalars['Int'];\n  tagId: Scalars['Int'];\n}>;\n\n\nexport type AddTagPostMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addTagPost'>\n);\n\nexport type CreatePostMutationVariables = Exact<{\n  input: PostInput;\n}>;\n\n\nexport type CreatePostMutation = (\n  { __typename?: 'Mutation' }\n  & { createPost: (\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'title' | 'description' | 'createdAt' | 'updatedAt'>\n  ) }\n);\n\nexport type CreateTagMutationVariables = Exact<{\n  text: Scalars['String'];\n}>;\n\n\nexport type CreateTagMutation = (\n  { __typename?: 'Mutation' }\n  & { createTag: (\n    { __typename?: 'Tag' }\n    & Pick<Tag, 'id' | 'text'>\n    & { posts?: Maybe<Array<(\n      { __typename?: 'Post' }\n      & Pick<Post, 'id' | 'title' | 'description' | 'updatedAt' | 'createdAt'>\n    )>> }\n  ) }\n);\n\nexport type DeletePostMutationVariables = Exact<{\n  postId: Scalars['Int'];\n}>;\n\n\nexport type DeletePostMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deletePost'>\n);\n\nexport type DeleteTagMutationVariables = Exact<{\n  tagId: Scalars['Int'];\n}>;\n\n\nexport type DeleteTagMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteTag'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  id: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'login'>\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type UpdatePostMutationVariables = Exact<{\n  id: Scalars['Int'];\n  input: PostInput;\n}>;\n\n\nexport type UpdatePostMutation = (\n  { __typename?: 'Mutation' }\n  & { updatePost: (\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'title' | 'description' | 'createdAt' | 'updatedAt'>\n  ) }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'me'>\n);\n\nexport type PostQueryVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type PostQuery = (\n  { __typename?: 'Query' }\n  & { post?: Maybe<(\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'title' | 'description' | 'createdAt' | 'updatedAt'>\n    & { tags?: Maybe<Array<(\n      { __typename?: 'Tag' }\n      & Pick<Tag, 'id' | 'text'>\n    )>> }\n  )> }\n);\n\nexport type PostsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PostsQuery = (\n  { __typename?: 'Query' }\n  & { posts: Array<(\n    { __typename?: 'Post' }\n    & Pick<Post, 'id' | 'title' | 'description' | 'createdAt' | 'updatedAt'>\n    & { tags?: Maybe<Array<(\n      { __typename?: 'Tag' }\n      & Pick<Tag, 'id' | 'text'>\n    )>> }\n  )> }\n);\n\nexport type TagsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type TagsQuery = (\n  { __typename?: 'Query' }\n  & { tags: Array<(\n    { __typename?: 'Tag' }\n    & Pick<Tag, 'id' | 'text' | 'postsLength'>\n  )> }\n);\n\n\nexport const AddTagPostDocument = gql`\n    mutation AddTagPost($postId: Int!, $tagId: Int!) {\n  addTagPost(postId: $postId, tagId: $tagId)\n}\n    `;\nexport type AddTagPostMutationFn = Apollo.MutationFunction<AddTagPostMutation, AddTagPostMutationVariables>;\n\n/**\n * __useAddTagPostMutation__\n *\n * To run a mutation, you first call `useAddTagPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddTagPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addTagPostMutation, { data, loading, error }] = useAddTagPostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *      tagId: // value for 'tagId'\n *   },\n * });\n */\nexport function useAddTagPostMutation(baseOptions?: Apollo.MutationHookOptions<AddTagPostMutation, AddTagPostMutationVariables>) {\n        return Apollo.useMutation<AddTagPostMutation, AddTagPostMutationVariables>(AddTagPostDocument, baseOptions);\n      }\nexport type AddTagPostMutationHookResult = ReturnType<typeof useAddTagPostMutation>;\nexport type AddTagPostMutationResult = Apollo.MutationResult<AddTagPostMutation>;\nexport type AddTagPostMutationOptions = Apollo.BaseMutationOptions<AddTagPostMutation, AddTagPostMutationVariables>;\nexport const CreatePostDocument = gql`\n    mutation CreatePost($input: postInput!) {\n  createPost(input: $input) {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n  }\n}\n    `;\nexport type CreatePostMutationFn = Apollo.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions?: Apollo.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {\n        return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, baseOptions);\n      }\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\nexport type CreatePostMutationResult = Apollo.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;\nexport const CreateTagDocument = gql`\n    mutation CreateTag($text: String!) {\n  createTag(text: $text) {\n    id\n    text\n    posts {\n      id\n      title\n      description\n      updatedAt\n      createdAt\n    }\n  }\n}\n    `;\nexport type CreateTagMutationFn = Apollo.MutationFunction<CreateTagMutation, CreateTagMutationVariables>;\n\n/**\n * __useCreateTagMutation__\n *\n * To run a mutation, you first call `useCreateTagMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTagMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTagMutation, { data, loading, error }] = useCreateTagMutation({\n *   variables: {\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useCreateTagMutation(baseOptions?: Apollo.MutationHookOptions<CreateTagMutation, CreateTagMutationVariables>) {\n        return Apollo.useMutation<CreateTagMutation, CreateTagMutationVariables>(CreateTagDocument, baseOptions);\n      }\nexport type CreateTagMutationHookResult = ReturnType<typeof useCreateTagMutation>;\nexport type CreateTagMutationResult = Apollo.MutationResult<CreateTagMutation>;\nexport type CreateTagMutationOptions = Apollo.BaseMutationOptions<CreateTagMutation, CreateTagMutationVariables>;\nexport const DeletePostDocument = gql`\n    mutation DeletePost($postId: Int!) {\n  deletePost(postId: $postId)\n}\n    `;\nexport type DeletePostMutationFn = Apollo.MutationFunction<DeletePostMutation, DeletePostMutationVariables>;\n\n/**\n * __useDeletePostMutation__\n *\n * To run a mutation, you first call `useDeletePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePostMutation, { data, loading, error }] = useDeletePostMutation({\n *   variables: {\n *      postId: // value for 'postId'\n *   },\n * });\n */\nexport function useDeletePostMutation(baseOptions?: Apollo.MutationHookOptions<DeletePostMutation, DeletePostMutationVariables>) {\n        return Apollo.useMutation<DeletePostMutation, DeletePostMutationVariables>(DeletePostDocument, baseOptions);\n      }\nexport type DeletePostMutationHookResult = ReturnType<typeof useDeletePostMutation>;\nexport type DeletePostMutationResult = Apollo.MutationResult<DeletePostMutation>;\nexport type DeletePostMutationOptions = Apollo.BaseMutationOptions<DeletePostMutation, DeletePostMutationVariables>;\nexport const DeleteTagDocument = gql`\n    mutation DeleteTag($tagId: Int!) {\n  deleteTag(tagId: $tagId)\n}\n    `;\nexport type DeleteTagMutationFn = Apollo.MutationFunction<DeleteTagMutation, DeleteTagMutationVariables>;\n\n/**\n * __useDeleteTagMutation__\n *\n * To run a mutation, you first call `useDeleteTagMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTagMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTagMutation, { data, loading, error }] = useDeleteTagMutation({\n *   variables: {\n *      tagId: // value for 'tagId'\n *   },\n * });\n */\nexport function useDeleteTagMutation(baseOptions?: Apollo.MutationHookOptions<DeleteTagMutation, DeleteTagMutationVariables>) {\n        return Apollo.useMutation<DeleteTagMutation, DeleteTagMutationVariables>(DeleteTagDocument, baseOptions);\n      }\nexport type DeleteTagMutationHookResult = ReturnType<typeof useDeleteTagMutation>;\nexport type DeleteTagMutationResult = Apollo.MutationResult<DeleteTagMutation>;\nexport type DeleteTagMutationOptions = Apollo.BaseMutationOptions<DeleteTagMutation, DeleteTagMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($id: String!, $password: String!) {\n  login(id: $id, password: $password)\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      id: // value for 'id'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const UpdatePostDocument = gql`\n    mutation UpdatePost($id: Int!, $input: postInput!) {\n  updatePost(id: $id, input: $input) {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n  }\n}\n    `;\nexport type UpdatePostMutationFn = Apollo.MutationFunction<UpdatePostMutation, UpdatePostMutationVariables>;\n\n/**\n * __useUpdatePostMutation__\n *\n * To run a mutation, you first call `useUpdatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePostMutation, { data, loading, error }] = useUpdatePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdatePostMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePostMutation, UpdatePostMutationVariables>) {\n        return Apollo.useMutation<UpdatePostMutation, UpdatePostMutationVariables>(UpdatePostDocument, baseOptions);\n      }\nexport type UpdatePostMutationHookResult = ReturnType<typeof useUpdatePostMutation>;\nexport type UpdatePostMutationResult = Apollo.MutationResult<UpdatePostMutation>;\nexport type UpdatePostMutationOptions = Apollo.BaseMutationOptions<UpdatePostMutation, UpdatePostMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const PostDocument = gql`\n    query Post($id: Int!) {\n  post(id: $id) {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n    tags {\n      id\n      text\n    }\n  }\n}\n    `;\n\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function usePostQuery(baseOptions?: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>) {\n        return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);\n      }\nexport function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {\n          return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);\n        }\nexport type PostQueryHookResult = ReturnType<typeof usePostQuery>;\nexport type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;\nexport type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;\nexport const PostsDocument = gql`\n    query Posts {\n  posts {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n    tags {\n      id\n      text\n    }\n  }\n}\n    `;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions?: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        return Apollo.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n      }\nexport function usePostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, baseOptions);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = Apollo.QueryResult<PostsQuery, PostsQueryVariables>;\nexport const TagsDocument = gql`\n    query Tags {\n  tags {\n    id\n    text\n    postsLength\n  }\n}\n    `;\n\n/**\n * __useTagsQuery__\n *\n * To run a query within a React component, call `useTagsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTagsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useTagsQuery(baseOptions?: Apollo.QueryHookOptions<TagsQuery, TagsQueryVariables>) {\n        return Apollo.useQuery<TagsQuery, TagsQueryVariables>(TagsDocument, baseOptions);\n      }\nexport function useTagsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TagsQuery, TagsQueryVariables>) {\n          return Apollo.useLazyQuery<TagsQuery, TagsQueryVariables>(TagsDocument, baseOptions);\n        }\nexport type TagsQueryHookResult = ReturnType<typeof useTagsQuery>;\nexport type TagsLazyQueryHookResult = ReturnType<typeof useTagsLazyQuery>;\nexport type TagsQueryResult = Apollo.QueryResult<TagsQuery, TagsQueryVariables>;"]},"metadata":{},"sourceType":"module"}