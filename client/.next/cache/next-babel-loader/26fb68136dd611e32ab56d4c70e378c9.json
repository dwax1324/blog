{"ast":null,"code":"var _jsxFileName = \"/home/develop/blog/client/pages/admin.tsx\";\nvar __jsx = React.createElement;\nimport React, { useRef } from \"react\";\nimport { MeDocument, useLoginMutation } from \"../generated/graphql\";\nimport Router from \"next/router\";\nimport { withApollo } from \"../utils/withApollo\";\nimport { Formik, Form } from \"formik\";\n\nconst admin = () => {\n  const router = Router;\n  const [login] = useLoginMutation();\n  const idEl = useRef(null);\n  const passwordEl = useRef(null); // let handleSubmit = () => {\n  //   // e.preventDefault();\n  //   const id = idEl.current.value;\n  //   const password = passwordEl.current.value;\n  //   const requestBody = {\n  //     query: `\n  //       mutation{\n  //         login(id:\"${id}\", password:\"${password}\")\n  //       }\n  //     `,\n  //   };\n  //   fetch(\"http://localhost:4000/graphql\", {\n  //     method: \"POST\",\n  //     body: JSON.stringify(requestBody),\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //   })\n  //     .then((res) => {\n  //       if (res.status !== 200 && res.status !== 201) {\n  //         throw new Error(\"연결실패\");\n  //       }\n  //       return res.json();\n  //     })\n  //     .then((resData) => {\n  //       if (resData.data.login) router.back();\n  //       else alert(\"authentication failed\");\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //     });\n  // };\n\n  return __jsx(React.Fragment, null, __jsx(Formik, {\n    initialValues: {\n      id: \"\",\n      password: \"\"\n    },\n    onSubmit: async (values, {\n      setErrors\n    }) => {\n      const response = await login({\n        variables: values,\n        update: (cache, {\n          data\n        }) => {\n          cache.writeQuery({\n            query: MeDocument,\n            data: {\n              __typename: \"Query\",\n              me: data === null || data === void 0 ? void 0 : data.login\n            }\n          });\n          console.log(values.id);\n          cache.evict({\n            fieldName: \"posts:{}\"\n          });\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, __jsx(\"input\", {\n    id: \"id\",\n    ref: idEl,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    id: \"password\",\n    ref: passwordEl,\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, \"submit\"))));\n};\n\nexport default withApollo({\n  ssr: true\n})(admin);","map":{"version":3,"sources":["/home/develop/blog/client/pages/admin.tsx"],"names":["React","useRef","MeDocument","useLoginMutation","Router","withApollo","Formik","Form","admin","router","login","idEl","passwordEl","id","password","values","setErrors","response","variables","update","cache","data","writeQuery","query","__typename","me","console","log","evict","fieldName","isSubmitting","ssr"],"mappings":";;AAAA,OAAOA,KAAP,IAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAGEC,UAHF,EAKEC,gBALF,QAMO,sBANP;AAOA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;;AAGA,MAAMC,KAAmB,GAAG,MAAM;AAChC,QAAMC,MAAM,GAAGL,MAAf;AACA,QAAM,CAACM,KAAD,IAAUP,gBAAgB,EAAhC;AACA,QAAMQ,IAAI,GAAGV,MAAM,CAAC,IAAD,CAAnB;AACA,QAAMW,UAAU,GAAGX,MAAM,CAAC,IAAD,CAAzB,CAJgC,CAMhC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SACE,4BACE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbY,MAAAA,EAAE,EAAE,EADS;AAEbC,MAAAA,QAAQ,EAAE;AAFG,KADjB;AAKE,IAAA,QAAQ,EAAE,OAAOC,MAAP,EAAe;AAAEC,MAAAA;AAAF,KAAf,KAAiC;AACzC,YAAMC,QAAQ,GAAG,MAAMP,KAAK,CAAC;AAC3BQ,QAAAA,SAAS,EAAEH,MADgB;AAE3BI,QAAAA,MAAM,EAAE,CAACC,KAAD,EAAQ;AAAEC,UAAAA;AAAF,SAAR,KAAqB;AAC3BD,UAAAA,KAAK,CAACE,UAAN,CAA0B;AACxBC,YAAAA,KAAK,EAAErB,UADiB;AAExBmB,YAAAA,IAAI,EAAE;AACJG,cAAAA,UAAU,EAAE,OADR;AAEJC,cAAAA,EAAE,EAAEJ,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEX;AAFN;AAFkB,WAA1B;AAOAgB,UAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAM,CAACF,EAAnB;AACAO,UAAAA,KAAK,CAACQ,KAAN,CAAY;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAAZ;AACD;AAZ0B,OAAD,CAA5B;AAcD,KApBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAsBG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,EAAE,EAAC,IAAV;AAAe,IAAA,GAAG,EAAEnB,IAApB;AAA0B,IAAA,IAAI,EAAC,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAO,IAAA,EAAE,EAAC,UAAV;AAAqB,IAAA,GAAG,EAAEC,UAA1B;AAAsC,IAAA,IAAI,EAAC,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,CAvBJ,CADF,CADF;AAkCD,CA1ED;;AA4EA,eAAeP,UAAU,CAAC;AAAE0B,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA0BvB,KAA1B,CAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport {\n  LoginDocument,\n  LoginMutation,\n  MeDocument,\n  MeQuery,\n  useLoginMutation,\n} from \"../generated/graphql\";\nimport Router from \"next/router\";\nimport { withApollo } from \"../utils/withApollo\";\nimport { Formik, Form } from \"formik\";\nimport { gql } from \"@apollo/client\";\n\nconst admin: React.FC<{}> = () => {\n  const router = Router;\n  const [login] = useLoginMutation();\n  const idEl = useRef(null);\n  const passwordEl = useRef(null);\n\n  // let handleSubmit = () => {\n  //   // e.preventDefault();\n  //   const id = idEl.current.value;\n  //   const password = passwordEl.current.value;\n\n  //   const requestBody = {\n  //     query: `\n  //       mutation{\n  //         login(id:\"${id}\", password:\"${password}\")\n  //       }\n  //     `,\n  //   };\n\n  //   fetch(\"http://localhost:4000/graphql\", {\n  //     method: \"POST\",\n  //     body: JSON.stringify(requestBody),\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //   })\n  //     .then((res) => {\n  //       if (res.status !== 200 && res.status !== 201) {\n  //         throw new Error(\"연결실패\");\n  //       }\n  //       return res.json();\n  //     })\n  //     .then((resData) => {\n  //       if (resData.data.login) router.back();\n  //       else alert(\"authentication failed\");\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //     });\n  // };\n  return (\n    <>\n      <Formik\n        initialValues={{\n          id: \"\",\n          password: \"\",\n        }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await login({\n            variables: values,\n            update: (cache, { data }) => {\n              cache.writeQuery<MeQuery>({\n                query: MeDocument,\n                data: {\n                  __typename: \"Query\",\n                  me: data?.login,\n                },\n              });\n              console.log(values.id);\n              cache.evict({ fieldName: \"posts:{}\" });\n            },\n          });\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <input id=\"id\" ref={idEl} type=\"text\" />\n            <input id=\"password\" ref={passwordEl} type=\"password\" />\n            <button type=\"submit\">submit</button>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default withApollo({ ssr: true })(admin);\n"]},"metadata":{},"sourceType":"module"}