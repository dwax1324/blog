{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/develop/blog/client/pages/admin.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef } from \"react\";\nimport { MeDocument, useLoginMutation } from \"../generated/graphql\";\nimport Router from \"next/router\";\nimport { withApollo } from \"../utils/withApollo\";\nimport { Formik, Form } from \"formik\";\n\nvar admin = function admin() {\n  _s();\n\n  var router = Router;\n\n  var _useLoginMutation = useLoginMutation(),\n      _useLoginMutation2 = _slicedToArray(_useLoginMutation, 1),\n      login = _useLoginMutation2[0];\n\n  var idEl = useRef(null);\n  var passwordEl = useRef(null); // let handleSubmit = () => {\n  //   // e.preventDefault();\n  //   const id = idEl.current.value;\n  //   const password = passwordEl.current.value;\n  //   const requestBody = {\n  //     query: `\n  //       mutation{\n  //         login(id:\"${id}\", password:\"${password}\")\n  //       }\n  //     `,\n  //   };\n  //   fetch(\"http://localhost:4000/graphql\", {\n  //     method: \"POST\",\n  //     body: JSON.stringify(requestBody),\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //   })\n  //     .then((res) => {\n  //       if (res.status !== 200 && res.status !== 201) {\n  //         throw new Error(\"연결실패\");\n  //       }\n  //       return res.json();\n  //     })\n  //     .then((resData) => {\n  //       if (resData.data.login) router.back();\n  //       else alert(\"authentication failed\");\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //     });\n  // };\n\n  console.log(login[0]);\n  return __jsx(React.Fragment, null, __jsx(Formik, {\n    initialValues: {\n      id: \"\",\n      password: \"\"\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref) {\n        var setErrors, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setErrors = _ref.setErrors;\n                _context.next = 3;\n                return login({\n                  variables: values,\n                  update: function update(cache, _ref3) {\n                    var data = _ref3.data;\n                    cache.writeQuery({\n                      query: MeDocument,\n                      data: {\n                        __typename: \"Query\",\n                        me: data === null || data === void 0 ? void 0 : data.login\n                      }\n                    });\n                    console.log(values.id);\n                    cache.evict({\n                      fieldName: \"posts:{}\"\n                    });\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, function (_ref4) {\n    var isSubmitting = _ref4.isSubmitting;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, __jsx(\"input\", {\n      name: \"id\",\n      ref: idEl,\n      type: \"text\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }), __jsx(\"input\", {\n      name: \"password\",\n      ref: passwordEl,\n      type: \"password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, \"submit\"));\n  }));\n};\n\n_s(admin, \"Oxg9nZP8YlmEfMGh1MP1duZYcOk=\", false, function () {\n  return [useLoginMutation];\n});\n\nexport default withApollo({\n  ssr: true\n})(admin);","map":{"version":3,"sources":["/home/develop/blog/client/pages/admin.tsx"],"names":["React","useRef","MeDocument","useLoginMutation","Router","withApollo","Formik","Form","admin","router","login","idEl","passwordEl","console","log","id","password","values","setErrors","variables","update","cache","data","writeQuery","query","__typename","me","evict","fieldName","response","isSubmitting","ssr"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAGEC,UAHF,EAKEC,gBALF,QAMO,sBANP;AAOA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;;AAGA,IAAMC,KAAmB,GAAG,SAAtBA,KAAsB,GAAM;AAAA;;AAChC,MAAMC,MAAM,GAAGL,MAAf;;AADgC,0BAEhBD,gBAAgB,EAFA;AAAA;AAAA,MAEzBO,KAFyB;;AAGhC,MAAMC,IAAI,GAAGV,MAAM,CAAC,IAAD,CAAnB;AACA,MAAMW,UAAU,GAAGX,MAAM,CAAC,IAAD,CAAzB,CAJgC,CAMhC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAAC,CAAD,CAAjB;AACA,SACE,4BACE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbK,MAAAA,EAAE,EAAE,EADS;AAEbC,MAAAA,QAAQ,EAAE;AAFG,KADjB;AAKE,IAAA,QAAQ;AAAA,2EAAE,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBC,gBAAAA,SAAjB,QAAiBA,SAAjB;AAAA;AAAA,uBACeR,KAAK,CAAC;AAC3BS,kBAAAA,SAAS,EAAEF,MADgB;AAE3BG,kBAAAA,MAAM,EAAE,gBAACC,KAAD,SAAqB;AAAA,wBAAXC,IAAW,SAAXA,IAAW;AAC3BD,oBAAAA,KAAK,CAACE,UAAN,CAA0B;AACxBC,sBAAAA,KAAK,EAAEtB,UADiB;AAExBoB,sBAAAA,IAAI,EAAE;AACJG,wBAAAA,UAAU,EAAE,OADR;AAEJC,wBAAAA,EAAE,EAAEJ,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEZ;AAFN;AAFkB,qBAA1B;AAOAG,oBAAAA,OAAO,CAACC,GAAR,CAAYG,MAAM,CAACF,EAAnB;AACAM,oBAAAA,KAAK,CAACM,KAAN,CAAY;AAAEC,sBAAAA,SAAS,EAAE;AAAb,qBAAZ;AACD;AAZ0B,iBAAD,CADpB;;AAAA;AACFC,gBAAAA,QADE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,OALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAsBG;AAAA,QAAGC,YAAH,SAAGA,YAAH;AAAA,WACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,IAAZ;AAAiB,MAAA,GAAG,EAAEnB,IAAtB;AAA4B,MAAA,IAAI,EAAC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,GAAG,EAAEC,UAA5B;AAAwC,MAAA,IAAI,EAAC,UAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CADD;AAAA,GAtBH,CADF,CADF;AAkCD,CA3ED;;GAAMJ,K;UAEYL,gB;;;AA2ElB,eAAeE,UAAU,CAAC;AAAE0B,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA0BvB,KAA1B,CAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport {\n  LoginDocument,\n  LoginMutation,\n  MeDocument,\n  MeQuery,\n  useLoginMutation,\n} from \"../generated/graphql\";\nimport Router from \"next/router\";\nimport { withApollo } from \"../utils/withApollo\";\nimport { Formik, Form } from \"formik\";\nimport { gql } from \"@apollo/client\";\n\nconst admin: React.FC<{}> = () => {\n  const router = Router;\n  const [login] = useLoginMutation();\n  const idEl = useRef(null);\n  const passwordEl = useRef(null);\n\n  // let handleSubmit = () => {\n  //   // e.preventDefault();\n  //   const id = idEl.current.value;\n  //   const password = passwordEl.current.value;\n\n  //   const requestBody = {\n  //     query: `\n  //       mutation{\n  //         login(id:\"${id}\", password:\"${password}\")\n  //       }\n  //     `,\n  //   };\n\n  //   fetch(\"http://localhost:4000/graphql\", {\n  //     method: \"POST\",\n  //     body: JSON.stringify(requestBody),\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //   })\n  //     .then((res) => {\n  //       if (res.status !== 200 && res.status !== 201) {\n  //         throw new Error(\"연결실패\");\n  //       }\n  //       return res.json();\n  //     })\n  //     .then((resData) => {\n  //       if (resData.data.login) router.back();\n  //       else alert(\"authentication failed\");\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //     });\n  // };\n  console.log(login[0]);\n  return (\n    <>\n      <Formik\n        initialValues={{\n          id: \"\",\n          password: \"\",\n        }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await login({\n            variables: values,\n            update: (cache, { data }) => {\n              cache.writeQuery<MeQuery>({\n                query: MeDocument,\n                data: {\n                  __typename: \"Query\",\n                  me: data?.login,\n                },\n              });\n              console.log(values.id);\n              cache.evict({ fieldName: \"posts:{}\" });\n            },\n          });\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <input name=\"id\" ref={idEl} type=\"text\" />\n            <input name=\"password\" ref={passwordEl} type=\"password\" />\n            <button type=\"submit\">submit</button>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default withApollo({ ssr: true })(admin);\n"]},"metadata":{},"sourceType":"module"}